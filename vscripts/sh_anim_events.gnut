
global function MakeAnimEventData
global function AddAnimEvent
global function DeleteAnimEvent
global function GetOptionalAnimEventVar
global function RunAnimEventCallbacks
global function HasAnimEvent
global function GetImpactTableIndex
global function AnimEvents_Init

global function AddGlobalAnimEvent
global function AddGlobalAnimEventTokenize

#if SERVER
global function GlobalAnimEventWithStringParameter_WorldSound
global function SendSignalFromTokens
global function GlobalAnimEventWithStringParameter_FlagSet
#endif

#if CLIENT
global function ClientCodeCallback_HandleClientAnimEvent
#endif

global struct AnimEventData
{
	string eventName
	void functionref( entity ) callback
	var optionalVar
}

AnimEventData function MakeAnimEventData( string eventName, void functionref( entity ) callback, var optionalVar = null )
{
	AnimEventData aed
	aed.eventName = eventName
	aed.callback = callback
	aed.optionalVar = optionalVar
	return aed
}

AnimEventData function GetAnimEventDataForEvent( entity ent, string eventName )
{
	Assert( eventName in ent.e.animEventDataForEntity )
	return ent.e.animEventDataForEntity[ eventName ]
}

struct
{
	table<string,int> effectImpactTable
} file


void function AnimEvents_Init()
{
	RegisterSignal( "HideBodyGroupReliable" )
	RegisterSignal( "HideReliable" )

	RegisterImpactTable( "pilot_bodyslam" )
	RegisterImpactTable( "pilot_bodyslam_small" )
	RegisterImpactTable( "exp_medium" )
	RegisterImpactTable( "default" )
	RegisterImpactTable( "default_nosound" )
	RegisterImpactTable( "bounce_small_nosound" )

	AddGlobalAnimEvent( "hide", GlobalAnimEvent_Hide )
	AddGlobalAnimEvent( "show", GlobalAnimEvent_Show )

	AddGlobalAnimEvent( "hide_reliable", GlobalAnimEvent_HideReliable )
	AddGlobalAnimEventTokenize( "hide_bodygroup_reliable", GlobalAnimEvent_HideBodygroupReliable )
	AddGlobalAnimEventTokenize( "end_hide_bodygroup_reliable", GlobalAnimEvent_EndHideBodygroupReliable )

	AddGlobalAnimEventTokenize( "set_skin", GlobalAnimEvent_SetSkin )
	AddGlobalAnimEventTokenize( "fade_over_time", GlobalAnimEvent_FadeOverTime )
}

void function RegisterImpactTable( string name )
{
	file.effectImpactTable[ name ] <- PrecacheImpactEffectTable( name )
}

int function GetImpactTableIndex( string id  )
{
	if ( id in file.effectImpactTable )
		return file.effectImpactTable[ id ]

	return -1
}

var function GetOptionalAnimEventVar( entity ent, string eventName )
{
	AnimEventData animEventData = GetAnimEventDataForEvent( ent, eventName )
	return animEventData.optionalVar
}

// when the ent animates and hits an AE_SV_VSCRIPT_CALLBACK event, he will
// call the function registered to the given eventName
void function AddAnimEvent( entity ent, string eventName, void functionref( entity ent ) func, var optionalVar = null )
{
	Assert( !HasAnimEvent( ent, eventName ), "Already added anim event " + eventName + " for " + ent )

	AnimEventData animEventData
	animEventData.eventName = eventName
	animEventData.callback = func
	animEventData.optionalVar = optionalVar
	ent.e.animEventDataForEntity[ eventName ] <- animEventData
}

void function DeleteAnimEvent( entity ent, string eventName )
{
	Assert( HasAnimEvent( ent, eventName ) )
	delete ent.e.animEventDataForEntity[ eventName ]
}

bool function HasAnimEvent( entity ent, string eventName )
{
	return eventName in ent.e.animEventDataForEntity
}

void function RunAnimEventCallbacks( entity ent, string eventName )
{
	Assert( HasAnimEvent( ent, eventName ) )
	ent.e.animEventDataForEntity[ eventName ].callback( ent )
}

// when this guy animates and hits an AE_SV_VSCRIPT_CALLBACK or AE_CL_VSCRIPT_CALLBACK event, he will
// call the function registered to the given name
void function AddGlobalAnimEvent( string name, void functionref(entity) func )
{
#if SERVER
	Assert( !( name in svGlobal.globalAnimEventCallbacks ), "Already created global anim event " + name )
	svGlobal.globalAnimEventCallbacks[ name ] <- func
#elseif CLIENT
	Assert( !( name in clGlobal.globalAnimEventCallbacks ), "Already created global anim event " + name )
	clGlobal.globalAnimEventCallbacks[ name ] <- func
#endif
}

// use this when the callback name should be tokenised ex: "set_skin:1"
// AddGlobalAnimEventTokenize( "set_skin", GlobalAnimEvent_SetSkin ). Add an anim event like "set_skin:1" and a tokenized array will be passed to the function as ["set_skin","1"]
void function AddGlobalAnimEventTokenize( string name, void functionref(entity,array<string>) func )
{
	#if SERVER
		Assert( !( name in svGlobal.globalAnimEventTokenizeCallbacks ), "Already created global anim event " + name )
		svGlobal.globalAnimEventTokenizeCallbacks[ name ] <- func
	#elseif CLIENT
		Assert( !( name in clGlobal.clGlobalAnimEventTokenizeCallbacks ), "Already created global anim event " + name )
		clGlobal.clGlobalAnimEventTokenizeCallbacks[ name ] <- func
	#endif
}

#if SERVER
void function GlobalAnimEventWithStringParameter_Signal( entity guy, string msg )
{
	guy.Signal( msg, { signal = msg } )
}

void function GlobalAnimEventWithStringParameter_WorldSound( entity guy, string msg )
{
	array<string> tokens = split( msg, " " )
	string sound = tokens[0]
	vector origin
	if ( tokens.len() == 1 )
	{
		origin = guy.GetOrigin()
	}
	else
	{
		string tag = tokens[1]
		int index = guy.LookupAttachment( tag )
		origin = guy.GetAttachmentOrigin( index )
	}

	EmitSoundAtPosition( guy.GetTeam(), origin, sound )
}

void function GlobalAnimEventWithStringParameter_FlagSet( entity guy, string msg )
{
	//printl( "FLAG SET " + msg )
	FlagSet( msg )
}
#endif // server

void function SendSignalFromTokens( entity self, array<string> tokens )
{
	if ( tokens.len() == 2 )
	{
		self.Signal( tokens[1], { signal = tokens[1] } )
	}
	else
	{
		self.Signal( tokens[1], { signal = tokens[1], parm = tokens[2] } )
	}
}

#if CLIENT
void function ClientCodeCallback_HandleClientAnimEvent( entity self, string eventString )
{
	if ( HasAnimEvent( self, eventString ) )
		thread RunAnimEventCallbacks( self, eventString )

	array<string> tokens = split( eventString, ":" )
	string eventName = tokens[0]

	if ( eventName in clGlobal.clGlobalAnimEventTokenizeCallbacks )
	{
		thread clGlobal.clGlobalAnimEventTokenizeCallbacks[ eventName ]( self, tokens )
		return
	}

	if ( eventName in clGlobal.globalAnimEventCallbacks )
	{
		thread clGlobal.globalAnimEventCallbacks[ eventName ]( self )
		return
	}

	// TODO: turn these into callbacks
	switch ( eventName )
	{
		case "signal":
			SendSignalFromTokens( self, tokens )
			break

		case "level_signal":
			clGlobal.levelEnt.Signal( tokens[1] )
			break

		case "grenade_indicator":

			int damageDef
			switch ( tokens[1] )
			{
				case "damagedef_frag_drone_throwable":
					entity boss = self.GetBossPlayer()
					if ( IsValid( boss ) && boss.IsPlayer() )
						damageDef = damagedef_frag_drone_throwable_PLAYER
					else
						damageDef = damagedef_frag_drone_throwable_NPC
					break

				default:
					Assert( 0, "No mapping exists for damageDef " + tokens[1] )
					break
			}

			float damageRadius = float( expect int( Dev_DamageDef_GetSettingByKeyField( damageDef, "radius" ) ) )

			entity player = GetLocalViewPlayer()

			if ( IsAlive( self ) )
				thread GrenadeArrowThink( player, self, damageRadius, 0, false )
			break

		case "pet_titan_1p_sound":
			Assert( tokens.len() == 2 )
			Assert( self.IsTitan() )
			entity player = GetLocalViewPlayer()
			if ( self.GetBossPlayerName() == player.GetPlayerName() )
			{
				//printt( "local player is boss player!" )
				//printt( "Emit sound: " + tokens[1] + " on " + self )
				EmitSoundOnEntity( self, tokens[1] )
			}
			break

		case "pet_titan_3p_sound":
			Assert( tokens.len() == 2 )
			Assert( self.IsTitan() )
			entity player = GetLocalViewPlayer()
			if ( self.GetBossPlayerName() != player.GetPlayerName() )
			{
				//printt( "local player is not boss player!" )
				//printt( "Emit sound: " + tokens[1] + " on " + self )
				EmitSoundOnEntity( self, tokens[1] )
			}
			break

		case "screenblur":
			Assert( tokens.len() == 3 )
			float blur = float( tokens[1] )
			float blendtime = float( tokens[2] ) / 30
			printt( "blur", blur, blendtime )
			SetScreenBlur( blur, blendtime, EASING_SINE_INOUT )
			break

		case "fade_to_black":
			Assert( tokens.len() == 2 )
			entity player = GetLocalViewPlayer()
			float fadetime = float( tokens[1] ) / 30
			ScreenFade( player, 0, 0, 0, 255, fadetime, 10, FFADE_OUT | FFADE_PURGE )
			break

		case "fade_from_black":
			Assert( tokens.len() == 2 )
			entity player = GetLocalViewPlayer()
			float fadetime = float( tokens[1] ) / 30
			ScreenFade( player, 0, 0, 0, 255, fadetime, 0.1, FFADE_IN | FFADE_PURGE ) //0.1 hold to fix issue with lerp
			//	ScreenFade( player, 0, 0, 0, 255, fadetime, 0.0, FFADE_IN | FFADE_PURGE )
			break

		case "screenshake":
			// ex: "screenshake:5:20:3: // amplitude = 5,  frequency = 20, duration 3
			Assert( tokens.len() == 4 )
			ClientScreenShake( float( tokens[1] ), float( tokens[2] ), float( tokens[3] ), <0,0,0> )
			break

		case "hide_cockpit":
		{
			entity player = GetLocalViewPlayer()
			entity proxy = player.GetFirstPersonProxy()
			if ( IsValid( proxy ) && proxy == self )
				player.GetCockpit().Hide()
			break
		}

		//Best to do it like this instead of using the signalling functionality above
		//since the above functionality is for signalling the animating entity,
		//i.e. the prop dynamic animating instead of the player seeing the animation
		case "close_vdu":
		{
			entity player = GetLocalViewPlayer()
			player.Signal( "ConversationOver" )
			break
		}

		case "vdu_static_light":
		{
			break
		}

		case "vdu_static_heavy":
		{
			break
		}

		case "vdu_static_off":
		{
			break
		}

		case "screen_blackout" :
		{
			printt( "We got screen blackout event!" )
			break
		}

		case "vdu_close" :
		{
			break
		}

		case "mp_frag_drone_fx":
		{
			thread PlayWarningFXOnMPFragDrone( self ) //Can't just do AE_CL_CREATE_PARTICLE_EFFECT because those effects are only stopped when the entity is destroyed as opposed to killed. See bug 159462
			break
		}

	/*	Want to print error warning message but other valid animevents are causing a warnings. Such as HMN_Jump_Jet
		default:
		{
			Warning( "Unhandled AE_SV_VSCRIPT_CALLBACK event: " + eventString )
		}
	*/
	}
}
#endif // client

void function GlobalAnimEvent_Hide( entity guy )
{
	#if CLIENT
	if ( !guy.IsClientOnly() )
		return
	#endif

	guy.Hide()
}

void function GlobalAnimEvent_Show( entity guy )
{
	#if CLIENT
		if ( !guy.IsClientOnly() )
			return
	#endif

	guy.Signal( "HideReliable" )
	guy.Show()
}

void function GlobalAnimEvent_HideBodygroupReliable( entity ent, array<string> tokens )
{
	#if(CLIENT)
		if ( !ent.IsClientOnly() )
			return
	#endif

	int bodyGroupIndex = ent.FindBodygroup( tokens[1] )
	int bodyGroupStateStart = int( tokens[2] )
	int bodyGroupStateEnd = int( tokens[3] )

	thread __ReliableCallbackThread( ent, ["HideBodyGroupReliable"],
		void function( entity ent ) : ( bodyGroupIndex, bodyGroupStateStart )
		{
			if ( IsValid( ent ) )
				ent.SetBodygroupModelByIndex( bodyGroupIndex, bodyGroupStateStart )
		},
		void function( entity ent ) : ( bodyGroupIndex, bodyGroupStateEnd )
		{
			if ( IsValid( ent ) )
				ent.SetBodygroupModelByIndex( bodyGroupIndex, bodyGroupStateEnd )
		} )
}

void function GlobalAnimEvent_EndHideBodygroupReliable( entity guy, array<string> tokens )
{
	#if(CLIENT)
		if ( !guy.IsClientOnly() )
			return
	#endif

	//
	guy.Signal( "HideBodyGroupReliable" )
}

void function GlobalAnimEvent_HideReliable( entity ent )
{
	#if CLIENT
		if ( !ent.IsClientOnly() )
			return
	#endif

	thread __ReliableCallbackThread( ent, ["HideReliable"], HideEnt, ShowEnt )
}

void function HideEnt( entity ent )
{
	ent.Hide()
}

void function ShowEnt( entity ent )
{
	if ( IsValid( ent ) )
		ent.Show()
}

void function __ReliableCallbackThread( entity ent, array<string> endSignals, void functionref( entity ) startFunc, void functionref( entity ) endFunc )
{
	ent.Signal( "HideReliable" )
	ent.EndSignal( "OnDestroy" )
	ent.EndSignal( "ScriptAnimStop" )
	foreach ( signal in endSignals )
		ent.EndSignal( signal )

	OnThreadEnd(
		function() : ( ent, endFunc )
		{
			endFunc( ent )
		}
	)

	startFunc( ent )

	while ( ent.Anim_IsActive() )
		WaitFrame()
}

void function GlobalAnimEvent_FadeOverTime( entity ent, array<string> tokens )
{
	Assert( tokens.len() == 4 )

	float fadeTime = float( tokens[ 1 ] )
	int fadeFrom = int( tokens[ 2 ] )
	int fadeTo = int( tokens[ 3 ] )

	thread PROTO_FadeModelAlphaOverTime( ent, fadeTime, fadeFrom, fadeTo )
}

void function GlobalAnimEvent_SetSkin( entity model, array<string> tokens )
{
	// ex: "set_skin:1"
	Assert( tokens.len() == 2 )
	int skin = int( tokens[1] )
	model.SetSkin( skin )
}