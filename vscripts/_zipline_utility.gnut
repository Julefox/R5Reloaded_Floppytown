untyped

global function ZiplineUtility_Init
global function ZiplineUtility_Didload


global function Zipline_CreateZipline
global function Zipline_BuildInit

global function Zipline_EnableRestPoint 
global function Zipline_SetArmOffset
global function Zipline_SetAutoDetachDistance
global function Zipline_SetDetachEndOnUse_OnSpawn
global function Zipline_SetDropToBottom
global function Zipline_SetFadeDistance
global function Zipline_SetHeightLimit
global function Zipline_SetIsMoving
global function Zipline_SetLengthScale
global function Zipline_SetMaterial
global function Zipline_SetPreserveVelocity
global function Zipline_SetPushOffInDirectionX
global function Zipline_SetScale
global function Zipline_SetSkin
global function Zipline_SetSpeedScale
global function Zipline_SetWidth
global function Zipline_SetZiplineAngles

global function Zipline_CreatePanel

global function Zipline_Destroy

global function GetZiplineOrigin
global function GetZiplineAngles
global function GetZiplineLength
global function GetZiplineFromEntityPanel
global function GetZiplineFromZiplineName


// Const values
    const float  END_AUTO_DETACH_DISTANCE           = 50.0
    const float  NH_ARM_OFFSET                      = 160.0
    const float  NH_END_AUTO_DETACH_DISTANCE        = 150.0
    const float  NH_START_AUTO_DETACH_DISTANCE      = 150.0
    const float  START_AUTO_DETACH_DISTANCE         = 100.0
    const float  VERTICAL_ARM_OFFSET                = 200.0
    const float  ZIPLINE_LENGTH_OFFSET_SAME_Z_POS   = 0.99



// Assets
    const asset ZIPLINE_SUPPORT   = $"mdl/industrial/security_fence_post.rmdl"
    const asset ZIPLINE_ARM       = $"mdl/industrial/zipline_arm.rmdl"

global struct ZiplineUtility
{
    // Entities
    entity endZiplinePoint
    entity startZiplinePoint

    // Panels
    array < entity > newPanel
    entity panel

    // Vectors entities start / end
    vector endAng
    vector endPos
    vector endZipAng
    vector endZipPos
    vector startAng
    vector startPos
    vector startZipAng
    vector startZipPos

    // Vars
    bool isMoving           = false
    bool restPoint          = false
    bool supportIsValid     = false
    bool ziplineIsDestroyed = true
    bool ziplineIsValid     = false
    float endArmOffset
    float heightLimit     = 6000.0
    float startArmOffset
    int setSkinEnd        = 0
    int setSkinStart      = 0
    int xLimit            = 0
    int yLimit            = 0
    int zLimit            = 1
    string ziplineName
    vector zipPosOffset   = < 0, 0, 80 >

    // Array
    array < ZiplineUtility > ziplineArrayInit

    // KV.Files vars start
    bool isVertical
    float fadeDistance              = -1.0
    float lengthScale               = 1.0
    float scale                     = 1.0
    float speedScale                = 1.0
    float startAutoDetachDistance
    float width                     = 2.0
    int detachEndOnSpawn            = 0
    int detachEndOnUse              = 0
    int dropToBottom                = 1
    int preserveVelocity            = 0
    int startPushOffInDirectionX    = 1
    int ziplineVersion              = 3
    string material                 = "cable/zipline.vmt"

    // KV.Files vars end
    float endAutoDetachDistance
    int endPushOffInDirectionX      = 1

    // Settings change detected
    bool settingsChange                   = false

    bool settingsAnglesChange             = false
    bool settingsArmOffset                = false
    bool settingsAutoDetachDistance       = false
    bool settingsDetachEndOnUseAndSpawn   = false
    bool settingsDropToBottom             = false
    bool settingsFadeDistance             = false
    bool settingsHeightLimit              = false
    bool settingsIsMoving                 = false
    bool settingsLengthScale              = false
    bool settingsMaterial                 = false
    bool settingsPreserveVelocity         = false
    bool settingsPushOffInDirectionX      = false
    bool settingsRestPoint                = false
    bool settingsScale                    = false
    bool settingsSetSkin                  = false
    bool settingsSpeedScale               = false
    bool settingsWidth                    = false
}

global ZiplineUtility ziplineUtility


void function ZiplineUtility_Init()
{
    FlagInit( "PanelActivated" )
    FlagInit( "MovingZiplineThread" )
    AddCallback_EntitiesDidLoad( ZiplineUtility_Didload )
}


void function ZiplineUtility_Didload()
{

}


////////////////////////////////////////////////////////////
//  Initialize zipline
////////////////////////////////////////////////////////////
ZiplineUtility function Zipline_CreateZipline( string ziplineName, vector startPos, vector startAng, vector endPos = < 0, 0, 0 >, vector endAng = < 0, 0, 0 > )
{
    ZiplineUtility zipline

    if ( IsZiplineHaveSameName( ziplineName ) == true ) return zipline

    zipline.ziplineName = ziplineName

    zipline.startPos    = startPos ; zipline.startAng = startAng
    zipline.endPos      = endPos   ; zipline.endAng   = endAng

    switch ( endPos == < 0, 0, 0 > )
    {
        case true:
            zipline.endAutoDetachDistance   = END_AUTO_DETACH_DISTANCE
            zipline.isVertical              = true
            zipline.startAutoDetachDistance = START_AUTO_DETACH_DISTANCE
            zipline.endArmOffset            = VERTICAL_ARM_OFFSET
            zipline.startArmOffset          = VERTICAL_ARM_OFFSET
            break
        case false:
            zipline.endAutoDetachDistance   = NH_START_AUTO_DETACH_DISTANCE
            zipline.isVertical              = false
            zipline.startAutoDetachDistance = NH_END_AUTO_DETACH_DISTANCE
            zipline.endArmOffset            = NH_ARM_OFFSET
            zipline.startArmOffset          = NH_ARM_OFFSET
        break
    }

    if ( zipline.isVertical == false && startPos.z == endPos.z ) zipline.lengthScale = ZIPLINE_LENGTH_OFFSET_SAME_Z_POS

    ziplineUtility.ziplineArrayInit.append( zipline )

return zipline }


////////////////////////////////////////////////////////////
//  Create zipline
////////////////////////////////////////////////////////////
void function Zipline_BuildInit( ZiplineUtility zipline )
{
    if ( zipline.supportIsValid == false ) Zipline_CreateSupport( zipline )
    if ( zipline.ziplineIsValid == false ) Zipline_CreateZiplineInit( zipline )
}


////////////////////////////////////////////////////////////
//  Change zipline params
////////////////////////////////////////////////////////////
void function Zipline_EnableRestPoint ( ZiplineUtility zipline )
{
    zipline.restPoint         = true
    zipline.settingsChange    = true
    zipline.settingsRestPoint = true
}

void function Zipline_SetArmOffset( ZiplineUtility zipline, float startArmOffset, float endArmOffset = 0.0 )
{
    zipline.startArmOffset    = startArmOffset
    zipline.endArmOffset      = endArmOffset
    zipline.settingsChange    = true
    zipline.settingsArmOffset = true
}

void function Zipline_SetAutoDetachDistance( ZiplineUtility zipline, float startAutoDetachDistance, float endAutoDetachDistance = 50.0 )
{
    zipline.startAutoDetachDistance       = startAutoDetachDistance
    zipline.endAutoDetachDistance         = endAutoDetachDistance
    zipline.settingsChange                = true
    zipline.settingsAutoDetachDistance    = true
}

void function Zipline_SetDetachEndOnUse_OnSpawn( ZiplineUtility zipline, int detachEndOnUse, int detachEndOnSpawn )
{
    zipline.detachEndOnUse                    = detachEndOnUse
    zipline.detachEndOnSpawn                  = detachEndOnSpawn
    zipline.settingsChange                    = true
    zipline.settingsDetachEndOnUseAndSpawn    = true
}

void function Zipline_SetDropToBottom( ZiplineUtility zipline, int dropToBottom )
{
    zipline.dropToBottom            = dropToBottom
    zipline.settingsChange          = true
    zipline.settingsDropToBottom    = true
}

void function Zipline_SetFadeDistance( ZiplineUtility zipline, float fadeDistance )
{
    zipline.fadeDistance            = fadeDistance
    zipline.settingsChange          = true
    zipline.settingsFadeDistance    = true
}

void function Zipline_SetHeightLimit( ZiplineUtility zipline, float heightLimit )
{
    zipline.heightLimit           = heightLimit
    zipline.settingsChange        = true
    zipline.settingsHeightLimit   = true
}

void function Zipline_SetIsMoving( ZiplineUtility zipline )
{
    zipline.isMoving              = true
    zipline.settingsChange        = true
    zipline.settingsIsMoving      = true
}

void function Zipline_SetLengthScale( ZiplineUtility zipline, float lengthScale )
{
    zipline.lengthScale           = lengthScale
    zipline.settingsChange        = true
    zipline.settingsLengthScale   = true
}

void function Zipline_SetMaterial( ZiplineUtility zipline, string material )
{
    zipline.material          = material
    zipline.settingsChange    = true
    zipline.settingsMaterial  = true
}

void function Zipline_SetPreserveVelocity( ZiplineUtility zipline )
{
    zipline.preserveVelocity            = 1
    zipline.settingsChange              = true
    zipline.settingsPreserveVelocity    = true
}

void function Zipline_SetPushOffInDirectionX( ZiplineUtility zipline, int startPushOffInDirectionX, int endPushOffInDirectionX = 1 )
{
    zipline.startPushOffInDirectionX    = startPushOffInDirectionX
    zipline.endPushOffInDirectionX      = endPushOffInDirectionX
    zipline.settingsChange              = true
    zipline.settingsPushOffInDirectionX = true
}

void function Zipline_SetScale( ZiplineUtility zipline, float scale )
{
    zipline.scale             = scale
    zipline.settingsChange    = true
    zipline.settingsScale     = true
}

void function Zipline_SetSkin( ZiplineUtility zipline, int setSkinStart, int setSkinEnd = 0 )
{
    zipline.setSkinStart    = setSkinStart
    zipline.setSkinEnd      = setSkinEnd
    zipline.settingsChange  = true
    zipline.settingsSetSkin = true
}

void function Zipline_SetSpeedScale( ZiplineUtility zipline, float speedScale )
{
    zipline.speedScale            = speedScale
    zipline.settingsChange        = true
    zipline.settingsSpeedScale    = true
}

void function Zipline_SetWidth( ZiplineUtility zipline, float width )
{
    zipline.width             = width
    zipline.settingsChange    = true
    zipline.settingsWidth     = true
}

void function Zipline_SetZiplineAngles( ZiplineUtility zipline, vector startZipAng, vector endZipAng = < 0, 0, 0 > )
{
    switch ( zipline.isVertical )
    {
        case true:
            zipline.startZipAng   = startZipAng
            zipline.endZipAng     = startZipAng
            break
        case false:
            zipline.startZipAng   = startZipAng
            zipline.endZipAng     = endZipAng
            break
        default:
        break
    }
    zipline.settingsAnglesChange  = true
    zipline.settingsChange        = true
}


////////////////////////////////////////////////////////////
//  Create panel for ziplines
////////////////////////////////////////////////////////////
void function Zipline_CreatePanel( ZiplineUtility zipline, vector pos, vector ang )
{
    entity panel = CreateUsablePanel( pos, ang, "%&use%" )
    panel.SetSkin( 0 ) ; zipline.newPanel.append( panel )

    if ( IsValid( panel ) )
    {
        AddCallback_OnUseEntity( panel, OnUseZiplinePanel )
    }
}

void function OnUseZiplinePanel( entity panel, entity player, int useInputFlags )
{
    thread OnUseZiplinePanelThread( panel )
}

void function OnUseZiplinePanelThread( entity panel )
{
    FlagSet( "PanelActivated" )

    ZiplineUtility zipline = GetZiplineFromEntityPanel( panel )

    foreach ( panels in zipline.newPanel )
        thread ChangePanelState( panels )

    if ( zipline.ziplineIsDestroyed == true )
        Zipline_BuildInit( zipline )
    else if ( zipline.ziplineIsDestroyed == false )
        Zipline_Destroy( zipline )

    FlagWaitClear( "MovingZiplineThread" )

    FlagClear( "PanelActivated" )
}

void function ChangePanelState( entity panel )
{
    if ( IsValid( panel ) && panel.GetSkin() == 0 )
    {
        panel.UnsetUsable()
        panel.SetSkin( 1 )

            FlagWaitClear( "PanelActivated" )

        panel.SetUsable()
        panel.SetSkin( 0 )
    }
}

entity function CreateUsablePanel( vector pos, vector ang, string prompt )
{
    entity UsableButton = CreateEntity( "prop_dynamic" )
    UsableButton.kv.solid = 6
    UsableButton.SetValueForModelKey( $"mdl/props/global_access_panel_button/global_access_panel_button_wall.rmdl" )
    UsableButton.AllowMantle()
    UsableButton.SetOrigin( pos )
    UsableButton.SetAngles( ang )
    DispatchSpawn( UsableButton )

    UsableButton.SetUsable()
    UsableButton.SetUsableByGroup( "pilot" )
    UsableButton.SetUsePrompts( prompt, prompt )

return UsableButton }


////////////////////////////////////////////////////////////
//  Get zipline params
////////////////////////////////////////////////////////////
vector function GetZiplineOrigin( string ziplineName, string org_or_zip, string start_or_end )
{
    ZiplineUtility zipline = GetZiplineFromZiplineName( ziplineName ) ; vector vec

    switch ( org_or_zip )
    {
        case "org":
            switch ( start_or_end )
            {
                case "start": vec = zipline.startPos ; break
                case "end":   vec = zipline.endPos   ; break
                default: break
            }
            break

        case "zip":
            switch ( start_or_end )
            {
                case "start": vec = zipline.startZipPos ; break
                case "end":   vec = zipline.endZipPos   ; break
                default: break
            }
            break

        default: break
    }

return vec }

vector function GetZiplineAngles( string ziplineName, string org_or_zip, string start_or_end )
{
    ZiplineUtility zipline = GetZiplineFromZiplineName( ziplineName ) ; vector vec

    switch ( org_or_zip )
    {
        case "org":
            switch ( start_or_end )
            {
                case "start": vec = zipline.startAng ; break
                case "end":   vec = zipline.endAng   ; break
                default: break
            }
            break

        case "zip":
            switch ( start_or_end )
            {
                case "start": vec = zipline.startZipAng ; break
                case "end":   vec = zipline.endZipAng   ; break
                default: break
            }
            break

        default: break
    }

return vec }

float function GetZiplineLength( string ziplineName )
{
    ZiplineUtility zipline = GetZiplineFromZiplineName( ziplineName )
    return zipline.lengthScale
}

ZiplineUtility function GetZiplineFromEntityPanel( entity panel )
{
    foreach( ziplines in ziplineUtility.ziplineArrayInit )
    {
        if ( ziplines.newPanel.contains( panel ) )
            return ziplines
    }
unreachable }

ZiplineUtility function GetZiplineFromZiplineName( string ziplineName )
{
    foreach( ziplines in ziplineUtility.ziplineArrayInit )
    {
        if ( ziplines.ziplineName == ziplineName )
            return ziplines
    }
unreachable }

bool function IsZiplineHaveSameName( string ziplineName )
{
    foreach( ziplines in ziplineUtility.ziplineArrayInit )
    {
        if ( ziplines.ziplineName == ziplineName )
            return true
    }
return false }


////////////////////////////////////////////////////////////
//  Function used after Zipline_BuildInit()
///////////////////////////////////////////////////////////
array< entity > function Zipline_CreateSupport( ZiplineUtility zipline )
{
    // Entities Declaration
    array< entity > entityArray = [ ] ; entity startSupport ; entity startArm ; entity endSupport ; entity endArm

    // Offset for arm heigth | locked between 160.0 (min) / 280.0 (max)
    float minOffset = 160.0 ; float maxOffset = 280.0 ; float startArmOffset = zipline.startArmOffset ; float endArmOffset = zipline.endArmOffset
    if ( startArmOffset < minOffset ) startArmOffset = minOffset else if ( startArmOffset > maxOffset ) startArmOffset = maxOffset
    if ( endArmOffset   < minOffset ) endArmOffset   = minOffset else if ( endArmOffset   > maxOffset ) endArmOffset   = maxOffset

    // Temporary angle for the right position | Position offsets calculation
    vector startPos = zipline.startPos ; vector startAng = zipline.startAng ; vector endPos = zipline.endPos ; vector endAng = zipline.endAng
    vector startPosArm = startPos + < -1, -2, startArmOffset > ; vector endPosArm = endPos + < -1, -2, endArmOffset > ; vector angOffset = < 0, 90, 0 >
    vector tempAng = < 0, 0, 0 > ; vector tempAngForSupport = < 0, 90, 0 > ; vector startArmAng = startAng - angOffset ; vector endArmAng = endAng - angOffset

    if ( zipline.isVertical == true ) // If vertical
    {
        switch ( zipline.setSkinStart ) // With / Without support selection
        {
            case 0: // With support
                startSupport    = Zipline_CreateProp( ZIPLINE_SUPPORT, startPos, tempAngForSupport )
                startArm        = Zipline_CreateProp( ZIPLINE_ARM, startPosArm, tempAng )
                startArm.SetParent( startSupport ) ; startSupport.SetAngles( startAng )
                break
            case 1: // Without support
                startArm        = Zipline_CreateProp( ZIPLINE_ARM, startPos, startArmAng )
                break
            case 2: // Invisible model
                startArm        = Zipline_CreateProp( EMPTY_MODEL, startPos, startArmAng )
            default:
            break
        }

        // Add to array for return
        if ( startSupport != null ) entityArray.append( startSupport ) ; entityArray.append( startArm )
        
        // Return origin point of the zipline
        if ( zipline.setSkinStart != 2 ) zipline.startZipPos = PositionOffsetFromEnt( startArm, -4, -55.5, -12 ) else zipline.startZipPos = startPos

        // Set script name and target
        foreach ( ent in entityArray ) ent.SetScriptName( "IsVerticalZipline" )
        if ( startSupport != null ) SetTargetName( startSupport, zipline.ziplineName ) ; SetTargetName( startArm, zipline.ziplineName )
    }
    else // If non vertical
    {
        switch ( zipline.setSkinStart ) // With / Without support selection
        {
            case 0: // With support
                startSupport    = Zipline_CreateProp( ZIPLINE_SUPPORT, startPos, tempAngForSupport )
                startArm        = Zipline_CreateProp( ZIPLINE_ARM, startPosArm, tempAng )
                startArm.SetParent( startSupport ) ; startSupport.SetAngles( startAng )
                break
            case 1: // Without support
                startArm        = Zipline_CreateProp( ZIPLINE_ARM, startPos, startArmAng )
                break
            case 2: // Invisible model
                startArm        = Zipline_CreateProp( EMPTY_MODEL, startPos, startArmAng )
            default:
            break
        }

        switch ( zipline.setSkinEnd ) // With / Without support selection
        {
            case 0: // With support
                endSupport    = Zipline_CreateProp( ZIPLINE_SUPPORT, endPos, tempAngForSupport )
                endArm        = Zipline_CreateProp( ZIPLINE_ARM, endPosArm, tempAng )
                endArm.SetParent( endSupport ) ; endSupport.SetAngles( endAng )
                break
            case 1: // Without support
                endArm        = Zipline_CreateProp( ZIPLINE_ARM, endPos, endArmAng )
                break
            case 2: // Invisible model
                endArm        = Zipline_CreateProp( EMPTY_MODEL, endPos, endArmAng )
                break
            default:
            break
        }

        // Add to array for return
        if ( startSupport != null ) entityArray.append( startSupport )  ; entityArray.append( startArm )
        if ( endSupport   != null ) entityArray.append( endSupport )    ; entityArray.append( endArm )

        // Return origin point of the zipline
        if ( zipline.setSkinStart != 2 ) zipline.startZipPos = PositionOffsetFromEnt( startArm, -4, -55.5, -12 ) else zipline.startZipPos = startPos
        if ( zipline.setSkinEnd   != 2 ) zipline.endZipPos   = PositionOffsetFromEnt( endArm,   -4, -55.5, -12 ) else zipline.endZipPos   = endPos

        // Set script name and target
        foreach ( ent in entityArray ) ent.SetScriptName( "IsNonVerticalZipline" )
        if ( startSupport != null ) SetTargetName( startSupport, zipline.ziplineName + "_start" ) ; SetTargetName( startArm, zipline.ziplineName + "_start" )
        if ( endSupport   != null ) SetTargetName( endSupport,   zipline.ziplineName + "_end" )   ; SetTargetName( endArm,   zipline.ziplineName + "_end" )
    }

    zipline.supportIsValid = true

return entityArray }

array< entity > function Zipline_CreateZiplineInit( ZiplineUtility zipline )
{
    // Calculation part
    vector startZipPos = zipline.startZipPos ; vector endZipPos ; vector startZipAng ; vector endZipAng
    
    switch ( zipline.isVertical )
    {
        case true:
            vector offset         = startZipPos - zipline.zipPosOffset
            TraceResults result   = TraceLine( offset, offset + -zipline.heightLimit * < 0, 0, 1 >, [], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_PLAYER )
            startZipAng           = zipline.startZipAng ; endZipAng = zipline.endZipAng
            startZipAng.x         = startZipAng.x % 180.0
            startZipAng.y         = startZipAng.y % 180.0
            startZipAng.z         = startZipAng.z % 180.0

            if ( zipline.settingsHeightLimit == false ) { endZipPos = result.endPos + < 0, 0, 35 > } else { endZipPos = result.endPos } ; zipline.endZipPos = endZipPos
            break
        case false:
            startZipAng    = zipline.startZipAng ; endZipAng = zipline.endZipAng ; endZipPos = zipline.endZipPos

            startZipAng    = VectorToAngles( Normalize( endZipPos - startZipPos ) )
            startZipAng.x  = startZipAng.x % 180.0
            startZipAng.y  = startZipAng.y % 180.0
            startZipAng.z  = startZipAng.z % 180.0

            endZipAng      = VectorToAngles( Normalize( startZipPos - endZipPos ) )
            endZipAng.x    = endZipAng.x % 180.0
            endZipAng.y    = endZipAng.y % 180.0
            endZipAng.z    = endZipAng.z % 180.0
            break
        default:
        break
    }

    if ( zipline.isMoving == true ) endZipPos = startZipPos - < 0, 0, 0.1 >

    // Create start point
    entity startZiplinePoint = CreateEntity( "zipline" )

    startZiplinePoint.kv.DetachEndOnSpawn             = zipline.detachEndOnSpawn
    startZiplinePoint.kv.DetachEndOnUse               = zipline.detachEndOnUse
    startZiplinePoint.kv.Material                     = zipline.material
    startZiplinePoint.kv.scale                        = zipline.scale
    startZiplinePoint.kv.Width                        = zipline.width
    startZiplinePoint.kv.ZiplineAutoDetachDistance    = zipline.startAutoDetachDistance
    startZiplinePoint.kv.ZiplineDropToBottom          = zipline.dropToBottom
    startZiplinePoint.kv.ZiplineFadeDistance          = zipline.fadeDistance
    startZiplinePoint.kv.ZiplineLengthScale           = zipline.lengthScale
    startZiplinePoint.kv.ZiplinePreserveVelocity      = zipline.preserveVelocity
    startZiplinePoint.kv.ZiplinePushOffInDirectionX   = zipline.startPushOffInDirectionX
    startZiplinePoint.kv.ZiplineSpeedScale            = zipline.speedScale
    startZiplinePoint.kv.ZiplineVersion               = zipline.ziplineVersion
    startZiplinePoint.kv.ZiplineVertical              = zipline.isVertical

    if ( zipline.restPoint == true )
    {
        startZiplinePoint.kv._zipline_rest_point_0    = startZipPos.x + " " + startZipPos.y  + " " + startZipPos.z
        startZiplinePoint.kv._zipline_rest_point_1    = endZipPos.x   + " " + endZipPos.y    + " " + endZipPos.z
    }

    startZiplinePoint.SetAngles( startZipAng )
    startZiplinePoint.SetOrigin( startZipPos )

    // Create end point
    entity endZiplinePoint = CreateEntity( "zipline_end" )

    endZiplinePoint.kv.ZiplineAutoDetachDistance    = zipline.endAutoDetachDistance
    endZiplinePoint.kv.ZiplinePushOffInDirectionX   = zipline.endPushOffInDirectionX

    endZiplinePoint.SetAngles( endZipAng )
    endZiplinePoint.SetOrigin( endZipPos )

    startZiplinePoint.LinkToEnt( endZiplinePoint )

    DispatchSpawn( startZiplinePoint ) ; DispatchSpawn( endZiplinePoint )

    zipline.startZiplinePoint = startZiplinePoint
    zipline.endZiplinePoint   = endZiplinePoint

    if ( zipline.isMoving == true )
    {   thread Zipline_Mover( zipline ) }
    
    if ( GetCurrentPlaylistVarBool( "debug_printt_zipline", true ) && zipline.settingsChange == true ) SettingsChangeDetected( zipline )

    zipline.ziplineIsValid     = true
    zipline.ziplineIsDestroyed = false

return [ startZiplinePoint, endZiplinePoint ] }

function Zipline_Mover( ZiplineUtility zipline )
{
    FlagSet( "MovingZiplineThread" )

    entity endPoint = zipline.endZiplinePoint

    entity mover = CreateOwnedScriptMover( endPoint )
    endPoint.SetParent( mover )

    OnThreadEnd(
        function() : ( endPoint, mover )
        {
            if ( IsValid( endPoint ) ) endPoint.ClearParent()
            if ( IsValid( mover ) && endPoint.GetParent() == null ) mover.Destroy()
        }
    )

    float travelTime ; float travelTimeDivised

    if ( zipline.isVertical == true ) { travelTime = 6 } else { travelTime = 2 }

    travelTimeDivised = travelTime / 2

    mover.MoveTo( zipline.endZipPos, travelTime, travelTimeDivised, travelTimeDivised )

    wait travelTime

    FlagClear( "MovingZiplineThread" )
}


////////////////////////////////////////////////////////////
//  Destroy Zipline
///////////////////////////////////////////////////////////
void function Zipline_Destroy( ZiplineUtility zipline, bool destroyAll = false )
{
    entity startSkin = GetEnt( zipline.ziplineName + "_start" )
    entity endSkin   = GetEnt( zipline.ziplineName + "_end" )
    entity startZiplinePoint = zipline.startZiplinePoint
    entity endZiplinePoint   = zipline.endZiplinePoint

    if ( destroyAll == true && zipline.supportIsValid == true )
    {
        if ( IsValid( startSkin ) ) startSkin.Destroy()
        if ( IsValid( endSkin ) )   endSkin.Destroy()
        zipline.supportIsValid = false
    }
    if ( IsValid( startZiplinePoint ) ) startZiplinePoint.Destroy()
    if ( IsValid( endZiplinePoint ) )   endZiplinePoint.Destroy()

    zipline.ziplineIsValid     = false
    zipline.ziplineIsDestroyed = true
}


////////////////////////////////////////////////////////////
//  Printt settings that change
////////////////////////////////////////////////////////////
void function SettingsChangeDetected( ZiplineUtility zipline )
{
    printt( "" )
    printt( "Settings Change Detected on: " + zipline.ziplineName )

    if ( zipline.settingsAnglesChange           == true ) printt( "Zip Angles Setted to: start: "          + zipline.startZipAng              + " end: "   + zipline.endZipAng )
    if ( zipline.settingsArmOffset              == true ) printt( "Arm Offset Setted to: start: "          + zipline.startArmOffset           + " end: "   + zipline.endArmOffset )
    if ( zipline.settingsAutoDetachDistance     == true ) printt( "Auto Detach Setted to: start: "         + zipline.startAutoDetachDistance  + " end: "   + zipline.endAutoDetachDistance )
    if ( zipline.settingsDetachEndOnUseAndSpawn == true ) printt( "Detach On Use / Spawn Setted to: use: " + zipline.detachEndOnUse           + " spawn: " + zipline.detachEndOnSpawn )
    if ( zipline.settingsDropToBottom           == true ) printt( "Drop To Bottom Setted to: "             + zipline.dropToBottom )
    if ( zipline.settingsFadeDistance           == true ) printt( "Fade Distance Setted to: "              + zipline.fadeDistance )
    if ( zipline.settingsHeightLimit            == true ) printt( "Height Limit Setted to: "               + zipline.heightLimit )
    if ( zipline.settingsIsMoving               == true ) printt( "Moving Zipline Setted to: "             + zipline.isMoving )
    if ( zipline.settingsLengthScale            == true ) printt( "Length Scale Setted to: "               + zipline.lengthScale )
    if ( zipline.settingsMaterial               == true ) printt( "Material Setted to: "                   + zipline.material )
    if ( zipline.settingsPreserveVelocity       == true ) printt( "Preserve Velocity Setted to: "          + zipline.preserveVelocity )
    if ( zipline.settingsPushOffInDirectionX    == true ) printt( "PushOffInDirectionX Setted to: start: " + zipline.startPushOffInDirectionX + " end: "   + zipline.endPushOffInDirectionX )
    if ( zipline.settingsRestPoint              == true ) printt( "Rest Point Setted to: "                 + zipline.restPoint )
    if ( zipline.settingsScale                  == true ) printt( "Zipline Scale Setted to: "              + zipline.scale )
    if ( zipline.settingsSetSkin                == true ) printt( "Skin Setted to: start: "                + zipline.setSkinStart             + " end: "   + zipline.setSkinEnd )
    if ( zipline.settingsSpeedScale             == true ) printt( "Speed Scale Setted to: "                + zipline.speedScale )
    if ( zipline.settingsWidth                  == true ) printt( "Width Setted to: "                      + zipline.width )
    printt( "" )
}


////////////////////////////////////////////////////////////
//  Create a dynamic prop
////////////////////////////////////////////////////////////
entity function Zipline_CreateProp( asset a, vector pos, vector ang )
{
    entity prop = CreatePropDynamic( a, pos, ang, SOLID_VPHYSICS, -1 )
    prop.AllowMantle()
    int realm = -1
    if ( realm > -1 ) { prop.RemoveFromAllRealms() ; prop.AddToRealm( realm ) }
    prop.e.gameModeId = realm

return prop }
