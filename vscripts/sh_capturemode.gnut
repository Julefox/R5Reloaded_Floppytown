global function CaptureMode_Shared_Init

#if CLIENT
global function CL_CaptureInit
global function CL_CM_PlayAnim
global function CL_CM_StopAnim
global function CL_CM_KeyBox_Start
global function CL_CM_KeyBox_End
#endif //CLIENT

#if SERVER

global function ClientCommand_CM_PlayAnim
global function ClientCommand_CM_StopAnim
global function CM_KeyBox_Cycle_Up
global function CM_KeyBox_Cycle_Down
global function ClientCommand_CM_KeyBox_Start
global function ClientCommand_CM_KeyBox_End

struct
{
	int keybox_V = 0

	int keybox_R = 255
	int keybox_G = 0
	int keybox_B = 255

} file

#endif //SERVER


void function CaptureMode_Shared_Init()
{
	#if SERVER
		AddClientCommandCallback( "CM_PlayAnim", 		ClientCommand_CM_PlayAnim )
		AddClientCommandCallback( "CM_StopAnim", 		ClientCommand_CM_StopAnim )
		AddClientCommandCallback( "CM_KeyBox_Start", 	ClientCommand_CM_KeyBox_Start )
		AddClientCommandCallback( "CM_KeyBox_End", 		ClientCommand_CM_KeyBox_End )
	#endif //SERVER

	#if CLIENT
		RunUIScript( "AddLevelDevCommand", "CAPTURE MODE", "exec capture.cfg; script_client CL_CaptureInit(); script FlagSet( \"DisableLootDrops\" )" )
	#endif //CLIENT
}


table<string, table<string, array<string> > > function CM_GetAnimTable()
{
	//TABLE
	table<string, table<string, array<string> > > anims
	anims[ "null" ] <- {}

	anims[ "character_bloodhound" ] <- {}
	anims[ "character_bloodhound" ][ "lobby" ] 		<- [ 	"bloodhound_menu_lobby_center_idle",
															"bloodhound_menu_lobby_center_coo",
															"bloodhound_menu_lobby_center_pet",
															"bloodhound_menu_lobby_center_readyup" ]
	anims[ "character_bloodhound" ][ "other" ] 		<- [ 	"bloodhound_menu_select_ready_up",
														 	"bloodhound_gladcard_animated_bird",
															"bloodhound_gladcard_animated_come",
															"bloodhound_gladcard_animated_knife",
															"bloodhound_gladcard_animated_mogwai",
															"bloodhound_gladcard_animated_myaxe",
															"bloodhound_gladcard_animated_throw" ]

	anims[ "character_gibraltar" ] <- {}
	anims[ "character_gibraltar" ][ "lobby" ] 		<- [ 	"gibraltar_menu_lobby_center_idle",
															"gibraltar_menu_lobby_center_twitch",
															"gibraltar_menu_lobby_center_slap",
															"gibraltar_menu_lobby_center_readyup" ]
	anims[ "character_gibraltar" ][ "other" ] 		<- [ 	"gibraltar_menu_ready_up",
														 	"gibraltar_gladcard_animated_plop",
															"gibraltar_gladcard_animated_pointlaugh",
															"gibraltar_gladcard_animated_shieldbang" ]

	anims[ "character_bangalore" ] <- {}
	anims[ "character_bangalore" ][ "lobby" ] 		<- [ 	"bangalore_menu_lobby_center_idle",
															"bangalore_menu_lobby_center_idle_alt"
															"bangalore_menu_lobby_center_hair",
															"bangalore_menu_lobby_center_twitch",
															"bangalore_menu_lobby_center_readyup" ]
	anims[ "character_bangalore" ][ "other" ] 		<- [ 	"bangalore_menu_select_ready_up",
														 	"bangalore_gladcard_animated_catch",
															"bangalore_gladcard_animated_drill",
															"bangalore_gladcard_animated_takedown" ]

	anims[ "character_caustic" ] <- {}
	anims[ "character_caustic" ][ "lobby" ] 		<- [ 	"caustic_menu_lobby_center_idle",
															"caustic_menu_lobby_center_idle_alt"
															"caustic_menu_lobby_center_cough",
															"caustic_menu_lobby_center_gear",
															"caustic_menu_lobby_center_recorder",
															"caustic_menu_lobby_center_scratch" ]
	anims[ "character_caustic" ][ "other" ] 		<- [ 	"caustic_menu_ready_up",
														 	"caustic_gladcard_animated_coffee",
															"caustic_gladcard_animated_hunting",
															"caustic_gladcard_animated_tanksmash" ]

	anims[ "character_lifeline" ] <- {}
	anims[ "character_lifeline" ][ "lobby" ] 		<- [ 	"lifeline_menu_lobby_center_idle",
															"lifeline_menu_lobby_center_drone"
															"lifeline_menu_lobby_center_tap",
															"lifeline_menu_lobby_center_wipe",
															"lifeline_menu_lobby_center_readyup" ]
	anims[ "character_lifeline" ][ "other" ] 		<- [ 	"lifeline_menu_select_ready_up",
														 	"lifeline_gladcard_animated_baddog",
															"lifeline_gladcard_animated_dronedrummer",
															"lifeline_gladcard_animated_drop",
															"lifeline_gladcard_animated_gunslinger",
															"lifeline_gladcard_animated_robotgroove",
															"lifeline_gladcard_animated_heirloom" ]

	anims[ "character_mirage" ] <- {}
	anims[ "character_mirage" ][ "lobby" ] 		<- [ 		"mirage_menu_lobby_center_idle",
															"mirage_menu_lobby_center_beard"
															"mirage_menu_lobby_center_laugh",
															"mirage_menu_lobby_center_magic",
															"mirage_menu_lobby_center_picture" ]
	anims[ "character_mirage" ][ "other" ] 		<- [ 		"mirage_menu_select_ready_up",
														 	"mirage_gladcard_animated_sassy",
															"mirage_gladcard_animated_smolder" ]

	anims[ "character_pathfinder" ] <- {}
	anims[ "character_pathfinder" ][ "lobby" ] 		<- [ 	"pathfinder_menu_lobby_center_idle",
															"pathfinder_menu_lobby_center_hopping_more",
															"pathfinder_menu_lobby_center_screen",
															"pathfinder_menu_lobby_center_readyup" ]
	anims[ "character_pathfinder" ][ "other" ] 		<- [ 	"pathfinder_menu_ready_up",
														 	"pathfinder_animated_birdattack",
															"pathfinder_animated_crash",
															"pathfinder_animated_pose_emotes",
															"pathfinder_animated_pose_grapple",
															"pathfinder_animated_pose_spiderman",
															"pathfinder_animated_punchout" ]

	anims[ "character_wraith" ] <- {}
	anims[ "character_wraith" ][ "lobby" ] 			<- [ 	"wraith_menu_lobby_center_idle",
															"wraith_menu_lobby_center_hand",
															"wraith_menu_lobby_center_voices",
															"wraith_menu_lobby_center_readyup" ]
	anims[ "character_wraith" ][ "other" ] 			<- [ 	"wraith_menu_select_ready_up",
														 	"wraith_gladcard_animated_bluesteel",
															"wraith_gladcard_animated_boxing",
															"wraith_gladcard_animated_rise",
															"wraith_gladcard_common_kunaithrow",
															"wraith_gladcard_common_kunaitwirl" ]
															
															
	anims[ "character_wattson" ] <- {}
	anims[ "character_wattson" ][ "lobby" ] 		<- [ 	"wattson_menu_lobby_center_idle",
															"wattson_menu_lobby_center_squad" ]
	anims[ "character_wattson" ][ "other" ] 		<- [ 	"wattson_menu_select_ready_up",
														 	"wattson_gladcard_animated_shii",
															"wattson_gladcard_animated_electricfence",
															"wattson_gladcard_animated_Fix",
															"wattson_gladcard_animated_electric",
															"wattson_gladcard_animated_spin" ]
															
															
	anims[ "character_crypto" ] <- {}
	anims[ "character_crypto" ][ "lobby" ] 			<- [ 	"Crypto_menu_lobby_center_idle",
															"Crypto_menu_lobby_center_drone" ]
	anims[ "character_crypto" ][ "other" ] 			<- [ 	"Crypto_menu_select_ready_up",
														 	"Crypto_gladcard_animated_sneaker",
															"Crypto_gladcard_animated_puzzle",
															"Crypto_gladcard_animated_halloween",
															"Crypto_gladcard_animated_Hack"]


	anims[ "character_octane" ] <- {}
	anims[ "character_octane" ][ "lobby" ] 			<- [ 	"octane_menu_lobby_center_idle",
															"octane_menu_lobby_center_epic",
															"octane_menu_lobby_center_leg" ]
	anims[ "character_octane" ][ "other" ] 			<- [ 	"octane_menu_select_ready_up",
														 	"octane_gladcard_animated_wipeout",
														 	"octane_gladcard_animated_stimhead",
															"octane_gladcard_animated_jumpspin",
															"octane_gladcard_animated_consequences"]
	return anims
}
#if CLIENT

void function CL_CaptureInit()
{
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/KEY COLOR ROOM/[home] Enter Room", "r_drawworld 0; r_drawsky 0; r_drawstaticprops 0; mat_hide_sun_in_last_cascade 1; r_drawscreenspaceparticles 0; noise_filter_enabled 0; mat_disable_bloom 1; highlight_draw 0; script_client thread CL_CM_KeyBox_Start();" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/KEY COLOR ROOM/[end]  Exit Room", "r_drawworld 3; r_drawsky 1; r_drawstaticprops 1; mat_hide_sun_in_last_cascade 0; r_drawscreenspaceparticles 1; noise_filter_enabled 1; mat_disable_bloom 0; highlight_draw 1; script_client thread CL_CM_KeyBox_End();" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/KEY COLOR ROOM/[ins]  cycle color +", "script thread CM_KeyBox_Cycle_Up()" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/KEY COLOR ROOM/[del]  cycle color -", "script thread CM_KeyBox_Cycle_Down()" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/KEY COLOR ROOM/                   ", "" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/KEY COLOR ROOM/Toggle Sun Scale ( Good for indoors )", "toggle mat_sun_scale 1 0" )

	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F1]   Play Anim 1",  "script_client thread CL_CM_PlayAnim( 0 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F2]   Play Anim 2",  "script_client thread CL_CM_PlayAnim( 1 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F3]   Play Anim 3",  "script_client thread CL_CM_PlayAnim( 2 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F4]   Play Anim 4",  "script_client thread CL_CM_PlayAnim( 3 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F5]   Play Anim 5",  "script_client thread CL_CM_PlayAnim( 4 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F6]   Play Anim 6",  "script_client thread CL_CM_PlayAnim( 5 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F7]   Play Anim 7",  "script_client thread CL_CM_PlayAnim( 6 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F8]   Play Anim 8",  "script_client thread CL_CM_PlayAnim( 7 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F9]   Play Anim 9",  "script_client thread CL_CM_PlayAnim( 8 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F10]  Play Anim 10",  "script_client thread CL_CM_PlayAnim( 9 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F11]  Play Anim 11",  "script_client thread CL_CM_PlayAnim( 10 );")
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/                  ", "" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/ANIMS/[F12]  Stop Anim",  "script_client thread CL_CM_StopAnim();")

	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/MISC/Toggle Death Boxes", "script FlagToggle( \"DisableLootDrops\" )" )
	RunUIScript( "AddLevelDevCommand", "CAPTURE MODE/MISC/Toggle HUD", "toggle cl_drawhud 1 0" )
}

void function CL_CM_PlayAnim( int number )
{
	GetLocalClientPlayer().ClientCommand( "CM_PlayAnim " + number )
}

void function CL_CM_StopAnim()
{
	GetLocalClientPlayer().ClientCommand( "CM_StopAnim" )
}

void function CL_CM_KeyBox_Start()
{
	GetLocalClientPlayer().ClientCommand( "CM_KeyBox_Start" )
}

void function CL_CM_KeyBox_End()
{
	GetLocalClientPlayer().ClientCommand( "CM_KeyBox_End" )
}

#endif //CLIENT

#if SERVER

bool function ClientCommand_CM_PlayAnim( entity player, array<string> args )
{
	if ( args.len() == 0 )
		return false

	thread CM_PlayAnim( player, int( args[0] ) )
	return true
}

void function CM_PlayAnim( entity player, int number )
{
	//DATA
	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( player ), Loadout_CharacterClass() )
	string name = ItemFlavor_GetHumanReadableRef( character )

	table<string, table<string, array<string> > > animTable = CM_GetAnimTable()
	if ( !( name in animTable ) )
		return

	table<string, array<string> > anims = animTable[ name ]

	string style = ""
	int index = -1

	int lobbyNum 	= anims[ "lobby" ].len()

	//set the index based on the style
	if ( number < lobbyNum )
	{
		style = "lobby"
		index = number
	}
	else
	{
		style = "other"
		index = number - lobbyNum
	}

	if ( index >= anims[ style ].len() )
		return

	//KILL PREVIOUS INCARNATIONS
	player.Signal( "ScriptAnimStop" )

	player.EndSignal( "ScriptAnimStop" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	//always play the animation asked for, but lobby anims should end in the zero index idle, others should check to see if they have an end idle
	string anim1 = anims[ style ][ index ]
	string anim2 = ""

	if ( style == "lobby" && index != 0 )
	{
		anim2 = anims[ style ][ 0 ]
	}
	else
	{
		string test = anim1 + "_idle"
		if ( player.Anim_HasSequence( test ) )
			anim2 = test
	}

	float length = player.GetSequenceDuration( anim1 )
	thread PlayAnim( player, anim1 )

	// is there an ending idle to play?
	if ( anim2 != "" )
	{
		wait length - 0.1

		while( 1 )
		{
			//if the player char has changed, exit the loop
			ItemFlavor charTest = LoadoutSlot_WaitForItemFlavor( ToEHI( player ), Loadout_CharacterClass() )
			string nameTest = ItemFlavor_GetHumanReadableRef( charTest )
			if ( nameTest != name )
				return

			thread PlayAnim( player, anim2 )

			length = player.GetSequenceDuration( anim2 )
			wait length - 0.1
		}

	}
}

bool function ClientCommand_CM_StopAnim( entity player, array<string> args )
{
	player.Signal( "ScriptAnimStop" )
	player.Anim_Stop()
	return true
}

void function CM_KeyBox_Set( int style )
{
	file.keybox_V = style

	switch( style )
	{
		case 0:
			file.keybox_R = 255
			file.keybox_G = 0
			file.keybox_B = 255
			break

		case 1:
			file.keybox_R = 0
			file.keybox_G = 0
			file.keybox_B = 255
			break

		case 2:
			file.keybox_R = 0
			file.keybox_G = 255
			file.keybox_B = 0
			break

		case 3:
			file.keybox_R = 0
			file.keybox_G = 0
			file.keybox_B = 0
			break

		case 4:
			file.keybox_R = 255
			file.keybox_G = 255
			file.keybox_B = 255
			break
	}
}

void function CM_KeyBox_Cycle_Up()
{
	switch( file.keybox_V )
	{
		case 0:
			CM_KeyBox_Set( 1 )
			break

		case 1:
			CM_KeyBox_Set( 2 )
			break

		case 2:
			CM_KeyBox_Set( 3 )
			break

		case 3:
			CM_KeyBox_Set( 4 )
			break

		case 4:
			CM_KeyBox_Set( 0 )
			break
	}
}

void function CM_KeyBox_Cycle_Down()
{
	switch( file.keybox_V )
	{
		case 0:
			CM_KeyBox_Set( 4 )
			break

		case 1:
			CM_KeyBox_Set( 0 )
			break

		case 2:
			CM_KeyBox_Set( 1 )
			break

		case 3:
			CM_KeyBox_Set( 2 )
			break

		case 4:
			CM_KeyBox_Set( 3 )
			break
	}
}

bool function ClientCommand_CM_KeyBox_Start( entity player, array<string> args )
{
	thread CM_KeyBox_Start( player )
	return true
}

void function CM_KeyBox_Start( entity player )
{
	//KILL PREVIOUS INCARNATIONS
	player.Signal( "OnActivate" )

	player.EndSignal( "OnActivate" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	int a = 255

	float size = 200
	float time = 0.3

	vector origin = player.GetOrigin()

	while( 1 )
	{
		DebugDrawBox( origin, < -size, -size, -size >, < size, size, size >, file.keybox_R, file.keybox_G, file.keybox_B, a , time )
		wait 0.1
	}
}

bool function ClientCommand_CM_KeyBox_End( entity player, array<string> args )
{
	player.Signal( "OnActivate" )
	return true
}

#endif //SERVER
