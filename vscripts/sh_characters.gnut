global function ShCharacters_LevelInit

global function Loadout_CharacterClass
global function GetAllCharacters
global function GetLaunchCharacters
global function CharacterClass_GetSetFile
global function CharacterClass_GetIsShippingCharacter
global function CharacterClass_GetRole
global function CharacterClass_GetSortOrdinal
global function CharacterClass_GetMenuSmokeSkinIndex
global function CharacterClass_GetMenuBackgroundSkinIndex
global function CharacterClass_GetMenuButtonIndex
global function CharacterClass_GetMenuLightData
global function CharacterClass_GetHudUltimateColorData
global function CharacterClass_GetChromaGradient
global function CharacterClass_GetGalleryModelOffset
global function CharacterClass_GetGalleryPortrait
global function CharacterClass_GetGalleryPortraitBackground
global function CharacterClass_GetCharacterSelectPortrait
global function CharacterClass_GetCharacterLockedPortrait
global function CharacterClass_GetCharacterRoleImage
global function CharacterClass_GetCharacterSelectSubtitle
global function CharacterClass_GetReadyUpVoicelineEventList
global function CharacterClass_IsAvailable
global function CharacterClass_GetDamageScale

#if SERVER
global function GetStringArrayAvailableClassesForPlayer
#endif
global function CharacterClass_ConsiderLegHitBoxAsTorso
global function CharacterClass_GetMenuZoomOffset

#if CLIENT || UI 
global function GetCharacterButtonMapping
global function GetCharacterButtonOrder
#endif

#if SERVER || CLIENT
global function GetPlayerSettingBaseHealth
global function GetPlayerSettingBaseShield
#endif

//////////////////////
//////////////////////
//// Global Types ////
//////////////////////
//////////////////////

global enum eCharacterClassRole
// the order of this enum decides the order of the groups in the UI
{
	UNDECIDED,
	OFFENSE,
	DEFENSE,
	SUPPORT,
	RECON,
	_COUNT,
}

const table<int, asset> CHARACTER_ROLE_ICONS = {
	[eCharacterClassRole.OFFENSE] = $"rui/menu/character_select/utility/util_role_offense",
	[eCharacterClassRole.DEFENSE] = $"rui/menu/character_select/utility/util_role_defense",
	[eCharacterClassRole.SUPPORT] = $"rui/menu/character_select/utility/util_role_support",
	[eCharacterClassRole.RECON] = $"rui/menu/character_select/utility/util_role_recon",
	//	[eCharacterClassRole.BUILDER] = $"rui/menu/character_select/utility/util_role_builder",
}

global struct CharacterMenuLightData
{
	vector key_color
	vector fill_color
	vector rimL_color
	vector rimR_color
}

global struct CharacterHudUltimateColorData
{
	vector ultimateColor
	vector ultimateColorHighlight
}

///////////////////////
///////////////////////
//// Private Types ////
///////////////////////
///////////////////////
struct FileStruct_LifetimeLevel
{
	LoadoutEntry& characterSelectionSlot

	table<ItemFlavor, int> characterFlavorSortOrdinalMap
}
FileStruct_LifetimeLevel& fileLevel

table< ItemFlavor, array<int> > legHitBoxOverrides = {}

/////////////////////////
/////////////////////////
//// Initialiszation ////
/////////////////////////
/////////////////////////
#if SERVER || CLIENT || UI
void function ShCharacters_LevelInit()
{
	FileStruct_LifetimeLevel newFileGame
	fileLevel = newFileGame

	#if SERVER && R5DEV
		AddCallback_GeneratePDef( GenerateCharactersPDef )
	#endif

	AddCallback_RegisterRootItemFlavors( OnRegisterRootItemFlavors )
	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
}
#endif

void function InitLegHitBoxOverrides( ItemFlavor character )
{
	{
		string characterRef = ItemFlavor_GetHumanReadableRef( character )
		string legHitBoxOverrideString = GetCurrentPlaylistVarString( "leg_hitbox_override_" + characterRef.tolower(), "" )
		if ( legHitBoxOverrideString == "" )
			return

		legHitBoxOverrides[character] <- []
		array<string> hitBoxStrings = split( legHitBoxOverrideString, " " )
		foreach ( hitBoxString in hitBoxStrings )
		{
			int hitBoxID = hitBoxString.tointeger()
			legHitBoxOverrides[character].append( hitBoxID )
		}
	}
}

#if SERVER || CLIENT || UI
void function OnRegisterRootItemFlavors()
{
	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_selection" )
	entry.stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.CHARACTER
	entry.networkTo = eLoadoutNetworking.PLAYER_GLOBAL
	entry.networkVarName = "CharacterSelection"
	entry.isItemFlavorUnlocked = bool function( EHI playerEHI, ItemFlavor flavor, bool shouldIgnoreOtherSlots ) {
		return CharacterClass_IsAvailable( playerEHI, flavor )
	}
	entry.isSlotLocked = bool function( EHI playerEHI ) {
		#if SERVER
			return SURVIVAL_IsCharacterClassLocked( FromEHI( playerEHI ) )
		#elseif CLIENT || UI
			return true // todo(dw): fix this
		#endif
	}
	fileLevel.characterSelectionSlot = entry

	array<ItemFlavor> characterList = []
	foreach( asset characterAsset in CHARACTER_ASSETS )
	{
		if ( characterAsset == $"" )
			continue

		ItemFlavor ornull characterOrNull = RegisterItemFlavorFromSettingsAsset( characterAsset )
		if ( characterOrNull == null )
			continue
		characterList.append( expect ItemFlavor(characterOrNull) )
	}

	MakeItemFlavorSet( characterList, fileLevel.characterFlavorSortOrdinalMap )

	entry.validItemFlavorList = characterList
	entry.defaultItemFlavor = characterList.getrandom()

	#if CLIENT
		if ( IsLobby() )
		{
			AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( entry, void function( EHI playerEHI, ItemFlavor character ) {
				UpdateMenuCharacterModel( FromEHI( playerEHI ) )
			} )
		}
	#endif
}
#endif


#if SERVER || CLIENT || UI
void function OnItemFlavorRegistered_Character( ItemFlavor character )
{
	#if SERVER || CLIENT
		PrecacheModel( GetGlobalSettingsAsset( CharacterClass_GetSetFile( character ), "bodyModel" ) )
		PrecacheModel( GetGlobalSettingsAsset( CharacterClass_GetSetFile( character ), "armsModel" ) )
	#endif
}
#endif


#if SERVER && R5DEV
void function GenerateCharactersPDef()
{
	// this persistent data enum is required by sh_xp.gnut
	array<string> allCharacterRefs = []
	foreach( ItemFlavor character in GetAllCharacters() )
		allCharacterRefs.append( ItemFlavor_GetGUIDString( character ) )
	DEV_PDefGen_AddEnum( "eCharacterFlavor", allCharacterRefs, "All the character item flavors from Bakery that are registered in the game." )
}
#endif



//////////////////////////
//////////////////////////
//// Global functions ////
//////////////////////////
//////////////////////////
LoadoutEntry function Loadout_CharacterClass()
{
	return fileLevel.characterSelectionSlot
}


array<ItemFlavor> function GetAllCharacters()
{
	return GetAllItemFlavorsOfType( eItemType.character )
}


array<ItemFlavor> function GetLaunchCharacters()
{
	return GetItemFlavorsWithTags( [ GetItemFlavorByAsset( $"settings/itemflav/tag/launch_character.rpak" ) ] )
}


asset function CharacterClass_GetSetFile( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "setFile" )
}


bool function CharacterClass_GetIsShippingCharacter( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flavor ), "shippingCharacter" )
}


int function CharacterClass_GetRole( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return eCharacterClassRole[GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "role" )]
}


int function CharacterClass_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return fileLevel.characterFlavorSortOrdinalMap[flavor]
}


int function CharacterClass_GetMenuSmokeSkinIndex( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsInt( ItemFlavor_GetAsset( flavor ), "menuSmokeSkinIndex" )
}


int function CharacterClass_GetMenuBackgroundSkinIndex( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsInt( ItemFlavor_GetAsset( flavor ), "menuBackgroundSkinIndex" )
}

int function CharacterClass_GetMenuButtonIndex( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsInt( ItemFlavor_GetAsset( flavor ), "characterMenuButtonIndex" )
}

CharacterMenuLightData function CharacterClass_GetMenuLightData( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )
	CharacterMenuLightData data
	data.key_color = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "menuLightColorKey" )
	data.fill_color = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "menuLightColorFill" )
	data.rimL_color = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "menuLightColorRimL" )
	data.rimR_color = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "menuLightColorRimR" )
	return data
}


CharacterHudUltimateColorData function CharacterClass_GetHudUltimateColorData( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	CharacterHudUltimateColorData data
	data.ultimateColor = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "hudUltimateColor" )
	data.ultimateColorHighlight = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "hudUltimateColorHighlight" )
	return data
}

table< float, vector > function CharacterClass_GetChromaGradient( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return {
		[0.1] = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "chromaColor0" ),
		[0.9] = GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "chromaColor1" ),
	}
}

vector function CharacterClass_GetGalleryModelOffset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "galleryModelOffset" )
}


asset function CharacterClass_GetGalleryPortrait( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "galleryPortrait" )
}


asset function CharacterClass_GetGalleryPortraitBackground( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "galleryPortraitBackground" )
}


asset function CharacterClass_GetCharacterSelectPortrait( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "characterSelectIcon" )
}


asset function CharacterClass_GetCharacterLockedPortrait( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "characterLockIcon" )
}


asset function CharacterClass_GetCharacterRoleImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	int role = CharacterClass_GetRole( flavor )
	return CHARACTER_ROLE_ICONS[role]
}


string function CharacterClass_GetCharacterSelectSubtitle( ItemFlavor flavor )
{
	return "#" + ItemFlavor_GetHumanReadableRef( flavor ) + "_CHARSELECT_SUBTITLE"
}


array<string> function CharacterClass_GetReadyUpVoicelineEventList( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	array<string> voicelineEventList = []
	foreach( var entry in IterateSettingsAssetArray( ItemFlavor_GetAsset( flavor ), "readyUpVoicelines" ))
	{
		voicelineEventList.append( GetSettingsBlockString( entry, "event" ) )
	}
	return voicelineEventList
}


bool function CharacterClass_IsAvailable( EHI playerEHI, ItemFlavor desiredCharacter )
{
	if ( IsLobby() )
		return true

	if ( GetCurrentPlaylistVarBool( "sur_dev_unrestricted_character_changes", false ) )
		return true

	if ( playerEHI != EHI_null && GetCurrentPlaylistVarBool( "enable_one_class_per_team", true ) )
	{
		if ( Survival_DoesTeamHaveCharacter( EHI_GetTeam( playerEHI ), desiredCharacter, playerEHI ) )
			return false
	}

	return true
}

float function CharacterClass_GetDamageScale( ItemFlavor flavor )
{
	string characterRef = ItemFlavor_GetHumanReadableRef( flavor )
	float damageScale = GetCurrentPlaylistVarFloat( "damage_scale_" + characterRef.tolower(), 1.0 )

	return damageScale
}

#if SERVER
array<string> function GetStringArrayAvailableClassesForPlayer( entity player )
{
	array<string> classes
	foreach( ItemFlavor itemFlav in GetAllCharacters() )
	{
		if ( IsItemFlavorUnlockedForLoadoutSlot( ToEHI( player ), Loadout_CharacterClass(), itemFlav ) )
			classes.append( ItemFlavor_GetHumanReadableRef( itemFlav ) )
	}
	return classes
}
#endif

bool function CharacterClass_ConsiderLegHitBoxAsTorso( ItemFlavor flavor, int hitBox )
{
	if ( !(flavor in legHitBoxOverrides) )
		return false

	return ( legHitBoxOverrides[flavor].contains( hitBox ) )
}


vector function CharacterClass_GetMenuZoomOffset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.character )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "menuZoomOffset" )
}

#if CLIENT || UI
table<int,ItemFlavor> function GetCharacterButtonMapping( array<ItemFlavor> allCharacters, int totalButtons )
{
	table<int,ItemFlavor> mappingTable
	array<int> freeButtonMappings
	for ( int i = 0 ; i < totalButtons ; i++ )
		freeButtonMappings.append( i )

	//
	for ( int i = 0 ; i < allCharacters.len() ; i++ )
	{
		ItemFlavor itemFlav = allCharacters[i]
		int index = CharacterClass_GetMenuButtonIndex( itemFlav )
		Assert( index >= -1 && index < totalButtons, "Invalid characterMenuButtonIndex value for character " + ItemFlavor_GetHumanReadableRef( itemFlav ) )

		if ( index < 0 )
			continue

		Assert( !( index in mappingTable ), "Character " + ItemFlavor_GetHumanReadableRef( itemFlav ) + " characterMenuButtonIndex " + index + " is already used. It must be unique" )

		//
		mappingTable[ index ] <- itemFlav
		freeButtonMappings.removebyvalue( index )
	}

	//
	for ( int i = 0 ; i < allCharacters.len() ; i++ )
	{
		ItemFlavor itemFlav = allCharacters[i]
		int index = CharacterClass_GetMenuButtonIndex( itemFlav )

		if ( index != -1 )
			continue

		index = freeButtonMappings[0]
		Assert( !( index in mappingTable ) )

		//
		mappingTable[ index ] <- itemFlav
		freeButtonMappings.removebyvalue( index )
	}

	Assert( mappingTable.len() == allCharacters.len() )
	return mappingTable

}
array<ItemFlavor> function GetCharacterButtonOrder( array<ItemFlavor> allCharacters, int totalButtons )
{
	for ( int i = 0 ; i < allCharacters.len() ; i++ )
	{
		ItemFlavor character = allCharacters[i]
		int index            = CharacterClass_GetMenuButtonIndex( character )
		Assert( index >= -1 && index < totalButtons, "Invalid characterMenuButtonIndex value for character " + ItemFlavor_GetHumanReadableRef( character ) )
	}

	array<ItemFlavor> sortedCharacters = clone allCharacters
	sortedCharacters.sort( SortByMenuButtonIndex )

	return sortedCharacters
}

int function SortByMenuButtonIndex( ItemFlavor a, ItemFlavor b )
{
	int aIndex = CharacterClass_GetMenuButtonIndex( a )
	int bIndex = CharacterClass_GetMenuButtonIndex( b )

	if ( aIndex == -1 && bIndex != -1 )
		return 1

	if ( aIndex != -1 && bIndex == -1 )
		return -1

	if ( aIndex > bIndex )
		return 1

	if ( aIndex < bIndex )
		return -1

	return 0
}
#endif // CLIENT || UI
#if(SERVER || CLIENT)
int function GetPlayerSettingBaseHealth( entity player )
{
	return int( player.GetPlayerSettingFloat( "health" ) )
}

int function GetPlayerSettingBaseShield( entity player )
{
	return int( player.GetPlayerSettingFloat( "healthShield" ) )
}
#endif

///////////////////
///////////////////
//// Internals ////
///////////////////
///////////////////


