global function ShWeapons_LevelInit

global function RegisterWeaponForUse

global function WeaponItemFlavor_GetClassname
global function WeaponItemFlavor_GetCategory
global function WeaponItemFlavor_GetStatsCategory
global function WeaponItemFlavor_GetArmoryScale
global function WeaponItemFlavor_GetLootCeremonyScale
global function WeaponItemFlavor_GetBattlePassScale
global function WeaponItemFlavor_GetHudIcon
global function WeaponCategoryFlavor_GetMenuZoomOffset
global function GetWeaponItemFlavorByClass
global function GetAllWeaponItemFlavors
global function GetAllWeaponCategories
global function GetWeaponsInCategory
global function GetAllWeaponsInCategory
global function MainWeapon_GetIsShippingWeapon

#if SERVER || CLIENT
global function ShowDefaultBodygroupsOnFakeWeapon
#endif


//////////////////////
//////////////////////
//// Global Types ////
//////////////////////
//////////////////////
//

//global const array<string> DEFAULT_WEAPON_SIGHTS_BODYGROUP_NAMES = [ "sight_front", "sight_rear" ]

global const string WEAPON_STAT_CATEGORY_GOLD_WEAPON = "crate_unique"

///////////////////////
///////////////////////
//// Private Types ////
///////////////////////
///////////////////////
struct FileStruct_LifetimeLevel
{
	table<string, ItemFlavor> weaponClassnameItemFlavorMap
}
FileStruct_LifetimeLevel& fileLevel



////////////////////////
////////////////////////
//// Initialization ////
////////////////////////
////////////////////////
#if SERVER || CLIENT || UI
void function ShWeapons_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	#if SERVER && R5DEV
		AddCallback_GeneratePDef( GenerateWeaponsPDef )
	#endif

	#if (SERVER || CLIENT) //&& R5DEV // (dw): needs to be precached even in non-DEV to support DEV clients connecting to non-DEV servers
		PrecacheWeapon( $"weapon_cubemap" )
	#endif

	AddCallback_RegisterRootItemFlavors( void function() {
		foreach( asset weaponAsset in WEAPON_ASSETS )
			RegisterItemFlavorFromSettingsAsset( weaponAsset )

		foreach( var block in IterateSettingsAssetArray( $"settings/itemflavlist/weapon_categories.rpak", "list" ) )
			RegisterItemFlavorFromSettingsAsset( GetSettingsBlockAsset( block, "flavor" ) )
	} )
	AddCallback_OnItemFlavorRegistered( eItemType.loot_main_weapon, OnItemFlavorRegistered_WeaponItemFlavor )
}
#endif


#if SERVER || CLIENT || UI
void function OnItemFlavorRegistered_WeaponItemFlavor( ItemFlavor weaponFlavor )
{
	string classname = WeaponItemFlavor_GetClassname( weaponFlavor )
	fileLevel.weaponClassnameItemFlavorMap[classname] <- weaponFlavor

	RegisterWeaponForUse( classname )
}
#endif


#if SERVER || CLIENT || UI
void function RegisterWeaponForUse( string weaponClassname )
{
	//printt( VM_NAME(), FUNC_NAME(), FUNC_NAME( 1 ), weaponClassname )
	#if SERVER || CLIENT
		PrecacheWeapon( weaponClassname )
		RegisterWeaponDamageSource( weaponClassname )
	#endif
}
#endif



//////////////////////////
//////////////////////////
//// Global functions ////
//////////////////////////
//////////////////////////
string function WeaponItemFlavor_GetClassname( ItemFlavor weapon )
{
	Assert( ItemFlavor_GetType( weapon ) == eItemType.loot_main_weapon )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( weapon ), "entityClassname" )
}


ItemFlavor ornull function GetWeaponItemFlavorByClass( string classname )
{
	if ( classname in fileLevel.weaponClassnameItemFlavorMap )
		return fileLevel.weaponClassnameItemFlavorMap[classname]

	return null
}


ItemFlavor function WeaponItemFlavor_GetCategory( ItemFlavor weapon )
{
	Assert( ItemFlavor_GetType( weapon ) == eItemType.loot_main_weapon )

	return GetItemFlavorByAsset( GetGlobalSettingsAsset( ItemFlavor_GetAsset( weapon ), "category" ) )
}


string function WeaponItemFlavor_GetStatsCategory( ItemFlavor weapon )
{
	Assert( ItemFlavor_GetType( weapon ) == eItemType.loot_main_weapon )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( weapon ), "statsCategory" )
}


float function WeaponItemFlavor_GetArmoryScale( ItemFlavor weapon )
{
	Assert( ItemFlavor_GetType( weapon ) == eItemType.loot_main_weapon )

	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( weapon ), "armoryScale" )
}


float function WeaponItemFlavor_GetLootCeremonyScale( ItemFlavor weapon )
{
	Assert( ItemFlavor_GetType( weapon ) == eItemType.loot_main_weapon )

	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( weapon ), "lootCeremonyScale" )
}


float function WeaponItemFlavor_GetBattlePassScale( ItemFlavor weapon )
{
	Assert( ItemFlavor_GetType( weapon ) == eItemType.loot_main_weapon )

	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( weapon ), "battlePassScale" )
}


asset function WeaponItemFlavor_GetHudIcon( ItemFlavor weapon )
{
	string weaponName = WeaponItemFlavor_GetClassname( weapon )

	return GetWeaponInfoFileKeyFieldAsset_Global( weaponName, "hud_icon" )

}


vector function WeaponCategoryFlavor_GetMenuZoomOffset( ItemFlavor weaponCategory )
{
	Assert( ItemFlavor_GetType( weaponCategory ) == eItemType.weapon_category )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( weaponCategory ), "menuZoomOffset" )
}


array<ItemFlavor> function GetAllWeaponItemFlavors()
{
	return GetAllItemFlavorsOfType( eItemType.loot_main_weapon )
}


array<ItemFlavor> function GetAllWeaponCategories()
{
	return GetAllItemFlavorsOfType( eItemType.weapon_category )
}


array<ItemFlavor> function GetWeaponsInCategory( ItemFlavor category )
{
	Assert( ItemFlavor_GetType( category ) == eItemType.weapon_category )

	array<ItemFlavor> allWeapons = GetAllItemFlavorsOfType( eItemType.loot_main_weapon )
	array<ItemFlavor> categoryWeapons

	entity player = null
	#if UI
		player = GetUIPlayer()
	#elseif CLIENT
		player = GetLocalClientPlayer()
	#endif

	foreach ( weapon in allWeapons )
	{
		if ( !ItemFlavor_ShouldBeVisible( weapon, player ) )
			continue

		if ( WeaponItemFlavor_GetCategory( weapon ) == category )
			categoryWeapons.append( weapon )
	}

	return categoryWeapons
}


array<ItemFlavor> function GetAllWeaponsInCategory( ItemFlavor category )
{
	Assert( ItemFlavor_GetType( category ) == eItemType.weapon_category )

	array<ItemFlavor> allWeapons = GetAllItemFlavorsOfType( eItemType.loot_main_weapon )
	array<ItemFlavor> categoryWeapons

	foreach ( weapon in allWeapons )
	{
		if ( WeaponItemFlavor_GetCategory( weapon ) == category )
			categoryWeapons.append( weapon )
	}

	return categoryWeapons
}


bool function MainWeapon_GetIsShippingWeapon( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.loot_main_weapon )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flavor ), "shippingWeapon" )
}



#if SERVER || CLIENT
void function ShowDefaultBodygroupsOnFakeWeapon( entity ent, string weaponClassName )
{
	SetBodyGroupsForWeaponConfig( ent, weaponClassName, [] )
}
#endif


//#if SERVER || CLIENT
//void function ShowDefaultSightsOnWeapon( entity ent, string weaponClassName )
//{
//	foreach ( group in DEFAULT_WEAPON_SIGHTS )
//	{
//		int bodyGroupIndex = ent.FindBodygroup( group )
//		if ( bodyGroupIndex >= 0 )
//		{
//			ent.SetBodygroupModelByIndex( bodyGroupIndex, 1 )
//		}
//	}
//}
//#endif



///////////////////
///////////////////
//// Internals ////
///////////////////
///////////////////
#if SERVER && R5DEV
void function GenerateWeaponsPDef()
{
	// this persistent data enum is required by sh_xp.gnut
	array<string> allWeaponRefs = []
	foreach( ItemFlavor character in GetAllWeaponItemFlavors() )
		allWeaponRefs.append( ItemFlavor_GetGUIDString( character ) )
	DEV_PDefGen_AddEnum( "eWeaponFlavor", allWeaponRefs, "All the weapon item flavors from Bakery that are registered in the game." )
}
#endif


