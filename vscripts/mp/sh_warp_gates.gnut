global function ShWarpGates_Init

#if CLIENT
global function ServerCallback_StartWarpGateExitSequence
global function ServerCallback_FlashScreenForPlayer
global function ServerCallback_PlayPhaseGateSoundSuite

const FX_1P_GATE_ENTER = $"P_wrth_tt_portal_screen_flash"

const string PHASE_GATE_ENTER_1P 	= "PhaseGate_Enter_1p"
const string PHASE_GATE_TRAVEL_1P 	= "PhaseGate_Travel_1p"
const string PHASE_GATE_EXIT_1P 	= "PhaseGate_Exit_1p"
#endif

#if SERVER
//
//
//









//
//
//


//



//







//
//
//

//

































//
//



























#endif // SERVER

void function ShWarpGates_Init()
{

	#if CLIENT
	PrecacheParticleSystem( FX_1P_GATE_ENTER )
	#endif

	#if SERVER


	#endif // SERVER

	Remote_RegisterClientFunction( "ServerCallback_StartWarpGateExitSequence", "float", 0.0, 100.0, 8 )
	Remote_RegisterClientFunction( "ServerCallback_FlashScreenForPlayer" )
	Remote_RegisterClientFunction( "ServerCallback_PlayPhaseGateSoundSuite" )
}

#if SERVER
//
//
//
//
//
//
//

//






//
//
//









//

















//
//
//
//

//





















//


//















//
//
//
//


















//



//
//
//
//
//
//


































//







//
//
//
//
//
//
//



//
//
//
//






























//





//




//


































//



//
//
//
//
//
//

//







//




//










//



//







//









































//



















//












//

















































//














//
//
//







//































//









//






































//













//









//


//




//













//


















//











//








//





































//



























































#endif // SERVER

#if CLIENT

void function ServerCallback_StartWarpGateExitSequence( float duration )
{
	thread WarpGateExitSequence_Thread( duration )
}

void function WarpGateExitSequence_Thread( float duration )
{
	const float END_AMPLITUDE = 1.5
	float startTime = Time()
	while ( ( startTime + duration ) > Time() )
	{
		float amplitude = GraphCapped( Time() - startTime, 0, duration, 0, END_AMPLITUDE )
		ClientScreenShake( amplitude, 1, 1.0, < 0, 0, 0 > )
		wait 0.1
	}
}

void function ServerCallback_FlashScreenForPlayer()
{
	entity player = GetLocalViewPlayer()
	//
	entity cockpit = player.GetCockpit()
	int fxHandle = StartParticleEffectOnEntity( cockpit, GetParticleSystemIndex( FX_1P_GATE_ENTER ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
	EffectSetIsWithCockpit( fxHandle, true )
}

void function ServerCallback_PlayPhaseGateSoundSuite()
{
	entity player = GetLocalViewPlayer()
	entity mover = player.GetParent()
	EmitSoundOnEntity( player, PHASE_GATE_ENTER_1P )
	EmitSoundOnEntity( mover, PHASE_GATE_TRAVEL_1P )

	thread StopPhaseSoundsOnPlayer_Thread( player, mover )
}

const float WAIT_ENTER_PHASE_TIMEOUT = 1.0
void function StopPhaseSoundsOnPlayer_Thread( entity player, entity mover )
{
	OnThreadEnd(
		function() : ( player, mover )
		{
			if ( IsValid( player ) )
			{
				EmitSoundOnEntity( player, PHASE_GATE_EXIT_1P )
			}

			if ( IsValid( mover ) )
				StopSoundOnEntity( mover, PHASE_GATE_TRAVEL_1P )
		}
	)

	EndSignal( player, "OnDestroy" )
	EndSignal( player, "OnDeath" )

	
	WaitFrame()

	//
	float startWaitTime = Time()
	while ( ( Time() - startWaitTime ) < WAIT_ENTER_PHASE_TIMEOUT )
	{
		if ( player.IsPhaseShifted() )
			break

		WaitFrame()
	}

	entity localViewPlayer = GetLocalViewPlayer()
	while ( true )
	{
		if ( !IsValid( player ) || !IsAlive( player ) )
		{
			break
		}
		//
		else if ( player != localViewPlayer )
		{
			break
		}
		else if ( !player.IsPhaseShifted() )
		{
			break
		}

		WaitFrame()
	}

	//
}

#endif // CLIENT