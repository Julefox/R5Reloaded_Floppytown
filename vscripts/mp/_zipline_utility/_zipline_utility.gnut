untyped


global function ZiplineUtility_Init


// Global const
    global const       ZIPLINE_EXPLOSION                        = $"p_impact_exp_small_full"

// Global const assets
    global const asset ZIPLINE_ARM                              = $"mdl/industrial/zipline_arm.rmdl"
    global const asset ZIPLINE_PLANEL_WALL                      = $"mdl/props/global_access_panel_button/global_access_panel_button_wall.rmdl"
    global const asset ZIPLINE_PLANEL_STAND                     = $"mdl/props/global_access_panel_button/global_access_panel_button_console_w_stand.rmdl"
    global const asset ZIPLINE_PLANEL_WALL_SUPPORT              = $"mdl/colony/antenna_01_colony_pole.rmdl"
    global const asset ZIPLINE_SUPPORT                          = $"mdl/industrial/security_fence_post.rmdl"

// Global const float
    global const float  ARM_MAX_OFFSET                          = 280.0
    global const float  ARM_MIN_OFFSET                          = 160.0
    global const float  END_AUTO_DETACH_DISTANCE                = 50.0
    global const float  HORIZONTAL_ARM_OFFSET                   = 160.0
    global const float  HORIZONTAL_END_AUTO_DETACH_DISTANCE     = 150.0
    global const float  HORIZONTAL_START_AUTO_DETACH_DISTANCE   = 150.0
    global const float  START_AUTO_DETACH_DISTANCE              = 100.0
    global const float  VERTICAL_ARM_OFFSET                     = 200.0
    global const float  ZIPLINE_LENGTH_OFFSET_SAME_Z_POS        = 0.99

// Global const string
    global const string HORIZONTAL_ZIPLINE_SCRIPT_NAME          = "IsNonVerticalZipline"
    global const string VERTICAL_ZIPLINE_SCRIPT_NAME            = "IsVerticalZipline"
    global const string ZIPLINE_END_SOUND                       = "explo_spectre"
    global const string ZIPLINE_PANEL_LOCKED                    = "npe_player_fail"
    global const string ZIPLINE_START_SOUND                     = "pathfinder_zipline_expand"

// Global const vector
    global const vector V_ZIPLINE_VECTOR                        = < 0.0001, 0.0001, 0.0001 >


global enum eZiplineSkinType
{
    ENTIRE,
    ARM_ONLY,
    INVISIBLE,
    _COUNT
}

global struct ZiplineState
{
    bool isFirstTimeInited  = true
    bool supportIsValid     = false
    bool ziplineIsValid     = false
    bool ziplineIsDestroyed = true
}

global struct KVFilesSettings
{
    // KV.Files vars start
    bool isVertical
    float fadeDistance              = -1.0
    float lengthScale               = 1.0
    float scale                     = 1.0
    float speedScale                = 1.0
    float startAutoDetachDistance
    float width                     = 2.0
    int detachEndOnSpawn            = 0
    int detachEndOnUse              = 0
    int dropToBottom                = 1
    int preserveVelocity            = 0
    int startPushOffInDirectionX    = 1
    int ziplineVersion              = 3
    string material                 = "cable/zipline.vmt"

    // KV.Files vars end
    float endAutoDetachDistance
    int endPushOffInDirectionX      = 1
}

global struct ZiplineVars
{
    bool destroyAll         = false
    bool disableVerticalZiplineOffset = false
    bool isMoving           = false
    bool restPoint          = false
    bool boolHeightLimit    = false
    float endArmOffset
    float heightLimit     = 10000.0
    float startArmOffset
    int setSkinEnd        = eZiplineSkinType.ENTIRE
    int setSkinStart      = eZiplineSkinType.ENTIRE
    int xLimit            = 0
    int yLimit            = 0
    int zLimit            = 1
    string ziplineName
    vector zipPosOffset   = < 0, 0, 80 >
}

global struct ZiplinePanel
{
    array < entity > newPanel
    bool panelNoTimer       = false
    bool panelUsableLimit   = false
    int numberMaxUsedPanel  = 0
    int numberUsedPanel     = 1
}

global enum ePanelSkinType
{
    WALL,
    STAND,
    _COUNT
}

global struct ZiplineUtility
{
    // Entities
    entity endZiplinePoint
    entity startZiplinePoint
    array < entity > supportArray

    // Vectors entities start / end
    vector endAng
    vector endPos
    vector endZipAng
    vector endZipPos
    vector startAng
    vector startPos
    vector startZipAng
    vector startZipPos

    KVFilesSettings settings
    ZiplineVars     vars
    ZiplinePanel    panels
    ZiplineState    state

    // Array
    array < ZiplineUtility > ziplineArrayInit
}
global ZiplineUtility ziplineUtility


void function ZiplineUtility_Init()
{
    ZiplinePrecache()
    AddCallback_EntitiesDidLoad( ZiplineUtility_Didload )
}

void function ZiplineUtility_Didload()
{
    OnMapZipline_Init()

    AddCallback_OnClientConnected( CreateRandomZipline )

    //ZiplineUtility ZiplineDev_0 = Zipline_CreateZipline( "ZiplineDev_0", < 30267.6523, -8548.48926, -26724.127 >, < 0, 180, 0 >, < 27560.5645, -6052.51074, -27460.7852 >, < 0, -90, 0 > )
    //Zipline_SetSkin( ZiplineDev_0, 0, 1 )
    //Zipline_InitZipline( ZiplineDev_0 )

    ZiplineUtility ZiplineDev_1 = Zipline_CreateZipline( "ZiplineDev_1", < 31041.3125, -8914.85645, -26730.5488 >, < 0, 0, 0 > )
    //Zipline_SetIsMoving( ZiplineDev_1 )
    Zipline_InitZipline( ZiplineDev_1 )
}

void function CreateRandomZipline( entity player )
{
    player = gp()[0]
    thread ThreadCreateRandomZipline( player )
}

void function ThreadCreateRandomZipline( entity player )
{
    wait 1
    vector origin = < 31931, -6148, -29070 >
    player.SetOrigin( origin )
    player.SetAngles( < 0, -90, 0 > )


    float z = 0.0

    for ( int i = 0 ; i < 7 ; i++)
    {
        string randomZipline = UniqueString( "random_zipline" )
        int vertical = RandomIntRange( 0, 2 )
        int panel = RandomIntRange( 0, 2 )
        int moving = RandomIntRange( 0, 2 )
        int restPoint = RandomIntRange( 0, 2 )
        int verticalOffset = RandomIntRange( 0, 2 )
        int vel = RandomIntRange( 0, 2 )
        int bottom = RandomIntRange( 0, 2 )
        int limit = RandomIntRange( 0, 10 )
        float startOff = RandomFloatRange( 160, 280 )
        float endOff = RandomFloatRange( 160, 280 )
        int DetachOnUse = 0 //RandomIntRange( 0, 2 )
        int DetachOnSpawn = 0 //RandomIntRange( 0, 2 )

        /* if ( vertical == 1 ) Zipline_CreateZipline( randomZipline, origin - < 0, 200, z >, < 0, RandomFloatRange( 0, 180 ), 0 > )
        else */Zipline_CreateZipline( randomZipline, origin - < 0, 200, z >, < 0, RandomFloatRange( 0, -180 ), 0 >, origin - < 0, 1200, z >, < 0, RandomFloatRange( 0, 180 ), 0 > )

        ZiplineUtility zipline = GZFZN( randomZipline )

        Zipline_SetSkin( zipline, RandomIntRange( 0, 3 ), RandomIntRange( 0, 3 ) )
        if ( panel == 1 ) Zipline_CreatePanel( zipline, origin - < 100, 200, z >, < 0, RandomFloatRange( 0, 180 ), 0 >, RandomIntRange( 0, 2 ) )
        if ( moving == 1 ) Zipline_SetIsMoving( zipline )
        if ( restPoint == 1 ) Zipline_EnableRestPoint( zipline )
        if ( verticalOffset == 1 ) Zipline_DisableVerticalZiplineOffset( zipline )
        Zipline_PanelUsableLimit( zipline, limit )
        Zipline_SetAutoDetachDistance( zipline, RandomFloatRange( 50, 400 ), RandomFloatRange( 50, 400 ) )
        Zipline_SetZiplineAngles( zipline, < 0, RandomFloatRange( 0, -180 ), 0 >, < 0, RandomFloatRange( 0, 180 ), 0 > )
        Zipline_SetArmOffset( zipline, startOff, endOff )
        Zipline_SetWidth( zipline, float( RandomIntRange( 2, 4 ) ) )
        Zipline_SetSpeedScale( zipline, RandomFloatRange( 1, 6 ) )
        Zipline_SetScale( zipline, float( RandomIntRange( 1, 2 ) ) )
        Zipline_SetLengthScale( zipline, RandomFloatRange( 0.90, 1.0 ) )
        if ( vel == 1 ) Zipline_SetPreserveVelocity( zipline )
        if ( bottom == 1 ) Zipline_DisableDropToBottom( zipline )
        Zipline_SetDetachEndOnUse_OnSpawn( zipline, DetachOnUse, DetachOnSpawn )
        Zipline_SetPushOffInDirectionX( zipline, RandomIntRange( 0, 2 ) )
        Zipline_InitZipline( zipline )

        printt( zipline.vars.ziplineName + " = restPoint: " + restPoint + " | moving: " + moving + " | limit: " + limit + " | S/E offset: " + startOff + " " + endOff + " | U/S Detach: " + DetachOnUse + " " + DetachOnSpawn )

        z -= 450.0
    }
}



