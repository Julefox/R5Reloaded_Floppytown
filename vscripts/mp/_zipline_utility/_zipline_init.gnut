untyped


global function OnMapZipline_Init


void function OnMapZipline_Init() // Explanation at the end of the file
{
    ZiplineUtility zipline

    switch ( GetMapName() )
    {
        case "mp_rr_aqueduct":
            break
        case "mp_rr_aqueduct_night":
            break
        case "mp_rr_arena_composite":
            break
        case "mp_rr_arena_skygarden":
            break
        case "mp_rr_ashs_redemption":
            break
        case "mp_rr_canyonlands_64k_x_64k":
            break
        case "mp_rr_canyonlands_mu1":
            break
        case "mp_rr_canyonlands_mu1_night":
            break
        case "mp_rr_canyonlands_staging":
        //Zipline_Register( "ZiplineDev_0", < 32350.8438, -5870.18701, -28892.2441 >, < 0, -90, 0 >, < 29516.0078, -7288.7002, -28088.0313 > )
        //    Zipline_SetSkin( zipline, eZiplineSkinType.ENTIRE, eZiplineSkinType.INVISIBLE )
        //    Zipline_CreatePanel( zipline, < 32312.041, -6166.5874, -28909.5293 >, < 0, 77, 0 > )
            
        //Zipline_Register( "ZiplineDev_0", < 30361.0098, -6299.37207, -26616.1035 >, < 0, 0, 0 > )
        //    Zipline_SetSkin( zipline, eZiplineSkinType.INVISIBLE )
        //    Zipline_IsIndianaJonesMode( zipline, 460.0 )

        //Zipline_Register( "ZiplineDev_0", < 28469.093750, -8141.214355, -27955.937500 >, < 0, 290, 0 >, < 31899.732422, -9077.593750, -28652.363281 >, < 0, 189, 0 > )
        //    Zipline_SetSkin( zipline, 1, 0 )

        //Zipline_Register( "ZiplineDev_0", < 1000, 0, 0 >, < 0, 0, 0 >, < 0, 0, 0 >, < 0, 0, 0 > )
        //    Zipline_SetSkin( zipline, eZiplineSkinType.INVISIBLE, eZiplineSkinType.INVISIBLE )

        zipline = Zipline_Register( "ZiplineDev_link_0_0", < 34592.0156, -7754.625, -28197.4492 >, < 0, 142, 0 >, < 35265.2734, -6086.50635, -27973.0293 >, < 0, 180, 0 > )
            Zipline_SetSkin( zipline, eZiplineSkinType.ARM_ONLY, eZiplineSkinType.ARM_ONLY )
            Zipline_SetLengthScale( zipline, 0.98 )

        zipline = Zipline_Register( "ZiplineDev_link_0_1", < 34818.8594, -3692.9231, -28319.8281 >, < 0, -164, 0 >, < 0, 0, 0 > )
            Zipline_AttachEndTo( zipline, "ZiplineDev_link_0_0", eZiplineEndPointType.END )
            Zipline_SetLengthScale( zipline, 0.98 )

        zipline = Zipline_Register( "ZiplineDev_link_0_2", < 31319.3867, -3502.78101, -27997.8203 >, < 0, 0, 0 >, < 0, 0, 0 > )
            Zipline_AttachEndTo( zipline, "ZiplineDev_link_0_1", eZiplineEndPointType.START )
            Zipline_SetSkin( zipline, eZiplineSkinType.INVISIBLE )
            Zipline_SetLengthScale( zipline, 0.98 )

        zipline = Zipline_Register( "ZiplineDev_Path_0", < 33125.8945, -9901.42871, -28834.875 >, < 0, 104, 0 >, < 30071.2891, -2414.07202, -25863.9375 >, < 0, -62, 0 > )
            Zipline_AddZiplinePath( zipline, < 32687.9434, -10144.0977, -28684.5215 >, < 0, 102, 0 >, eZiplineSkinType.ENTIRE )
            Zipline_AddZiplinePath( zipline, < 32031.8906, -10112.3975, -28049.4648 >, < 0, 60, 0 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 31048.75, -9816.57422, -27235.9258 >, < 0, 90, -22 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 30058.5664, -9701.41895, -26737.9336 >, < 90, 180, 0 >, eZiplineSkinType.ENTIRE )
            Zipline_AddZiplinePath( zipline, < 29792.3965, -9304.25977, -26788.8027 >, < 0, -132, 0 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 28828.5938, -8622.36035, -26915.2129 >, < 0, 0, 0 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 28509.4941, -8045.77588, -26838.7246 >, < 0, 40, 0 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 27699.7578, -6617.54834, -26739.0625 >, < 0, 0, 0 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 28492.1094, -4628.29004, -26816.25 >, < 0, -60, 0 >, eZiplineSkinType.ARM_ONLY )
            Zipline_AddZiplinePath( zipline, < 30996.0879, -2379.7478, -25878.7754 >, < 0, -106, 0 >, eZiplineSkinType.ENTIRE )

            break
        case "mp_rr_desertlands_64k_x_64k_nx":
            break
        case "mp_rr_desertlands_64k_x_64k_tt":
            break
        case "mp_rr_desertlands_64k_x_64k":
            break
        case "mp_rr_floppytown":
            break
        default: break
    }

    Zipline_InitAllRegisteredZiplineInScope()
}


/*
    Function for create ziplines like retail with options

    Credits : - Julefox ( Twitter: @Julefox_ | Discord: Julefox#0050 )

    How to use:
    - You don't need to put all the parameters, zipline has already defined parameters without having to change the values
    - In OnMapZipline_Init() you don't have to declare each zipline with the "ZiplineUtility zipline =", you can just put "zipline ="


    # Zipline_Register( string ziplineName, vector startEntityPos, vector startEntityAng, vector ornull endEntityPos = null, vector endEntityAng = < 0, 0, 0 > )
    {
        - This function is used to create the zipline
        - If nothing is entered in "endEntityPos" then the zipline will be automatically considered as vertical
    }

        # Zipline_CreatePanel( ZiplineUtility zipline, vector pos, vector ang, int skin = ePanelSkinType.WALL )
        {
            - Create a panel linked to the zipline, you can destroy the zipline or recreate it at will ( random cooldown between 32 and 60 seconds )
            - In "int skin" you can choose the skin type of the panel:
                - ePanelSkinType.WALL  || 0
                - ePanelSkinType.STAND || 1
            /!\ ePanelSkinType.WALL is not available on KC, it will be replaced by ePanelSkinType.STAND
        }

        # Zipline_DisableVerticalZiplineOffset( ZiplineUtility zipline )
        {
            - VERTICAL ZIPLINE ONLY
            - If set, the zipline will stop on the ground instead of having a space between the ground and the end of the zip ( 35.0 )
        }

        # Zipline_EnableRestPoint ( ZiplineUtility zipline )
        {
            - Enable rest point
        }

        # Zipline_SetFadeDistance( ZiplineUtility zipline, float fadeDistance )
        {
            - Defines the fade distance
        }

        # Zipline_SetHeightLimitFromTop( ZiplineUtility zipline, float heightLimit )
        {
            - VERTICAL ZIPLINE ONLY
            - If set, the zipline will make the length of "heightLimit"
        }

        # Zipline_SetHeightLimitFromFloor( ZiplineUtility zipline, float heightLimit )
        {
            - VERTICAL ZIPLINE ONLY
            - If set, the zipline will have a space between the ground and the end of the zipline defined by "heightLimit"
        }

        # Zipline_SetIsMoving( ZiplineUtility zipline )
        {
            - If set, the zipline will appear by moving
        }

        # Zipline_SetLengthScale( ZiplineUtility zipline, float lengthScale )
        {
            - Defines the length of the rope ( advisor between "0.90" and "1", on retail some can go to "0.8" or "0.5 )
        }

        # Zipline_SetMaterial( ZiplineUtility zipline, asset material )
        {
            - Change the type of material (if you find one that works please let me know )
        }

        # Zipline_SetPreserveVelocity( ZiplineUtility zipline )
        {
            - If set, the zipline preserves your velocity
        }

        # Zipline_SetScale( ZiplineUtility zipline, float scale )
        {
            - Defines the scale of the rope
        }

        # Zipline_SetSpeedScale( ZiplineUtility zipline, float speedScale )
        {
            - Defines the speed when you use it
        }

        # Zipline_SetWidth( ZiplineUtility zipline, float width )
        {
            - Defines the width of the rope
        }

        # Zipline_SetSkin( ZiplineUtility zipline, int setSkinStart, int setSkinEnd = eZiplineSkinType.ENTIRE )
        {
            - Choose the skin of your zipline support
            - In "int setSkinStart" || "int setSkinEnd" you can choose the skin of your zipline support:
                - eZiplineSkinType.ENTIRE    || 0
                - eZiplineSkinType.ARM_ONLY  || 1
                - eZiplineSkinType.INVISIBLE || 2
        }

        # Zipline_DisableDropToBottom( ZiplineUtility zipline )
        {
            - If set, disable drop to bottom
        }

        # Zipline_SetArmOffset( ZiplineUtility zipline, float startArmOffset, float endArmOffset = 0.0 )
        {
            - If the skin is set to "eZiplineSkinType.ENTIRE" choose the height of the support arm
        }

        # Zipline_SpawnSupportOnlyOnSpawn( ZiplineUtility zipline )
        {
            - Spawns the supports only ( without the zipline )
        }

        # Zipline_SetZiplineAngles( ZiplineUtility zipline, vector startZiplineAng, vector endZiplineAng = < 0, 0, 0 > )
        {
            - Defines the angle of the zipline (used for the vertical zipline to eject the player in the direction with Zipline_SetPushOffInDirectionX() )
            - If the zipline is vertical, "endZiplineAng" is useless
        }

        # Zipline_SetAutoDetachDistance( ZiplineUtility zipline, float startAutoDetachDistance, float endAutoDetachDistance = 0.0 )
        {
            - Defines how far away the player is automatically unhooked
            - If "endAutoDetachDistance" is not defined the script will automatically define the distance if the zipline is vertical or not
        }

        # Zipline_SetDetachEndOnUse_OnSpawn( ZiplineUtility zipline, int detachEndOnUse, int detachEndOnSpawn )
        {
            - If set, the end of the zipline is unhooked
            - If "detachEndOnUse" in set on 1: the zipline unhooks when a player uses it
            - If "detachEndOnSpawn" in set on 1: The zipline is unhooked at the spawn of the zip
        }

        # Zipline_SetPushOffInDirectionX( ZiplineUtility zipline, int PushOffInDirectionX )
        {
            - Defines if you want to eject the player in the direction of the zipline ( At the end of the stroke, natively set on 1 )
        }

        # Zipline_IsIndianaJonesMode( ZiplineUtility zipline, float floorOffset = ZIPLINE_OFFSET_FROM_FLOOR_DETACH_END )
        {
            - Have fun :)
        }

        // Panels
        # Zipline_SetPanelTimer( ZiplineUtility zipline, float minTimer, float maxTimer = 0.0 )
        {
            - Change the cooldown of the panel
            - Choose a random time between "minTimer" and "maxTimer"
            - If maxTimer = 0.0, the cool down will always be equal to "minTimer"
        }

        # Zipline_PanelUsableLimit( ZiplineUtility zipline, int maxUse = 1 )
        {
            - Defines the number of times the panels can be used
        }

        # Zipline_DestroyZiplineSupportOnPanelEnd( ZiplineUtility zipline )
        {
            - Defines whether the support should be destroyed with the panels once the usage limit is reached
        }

    # RegisteredZipline_Init( ZiplineUtility zipline )
    {
        - Create the zipline once all the parameters are entered
    }

    # Zipline_InitAllRegisteredZiplineInScope()
    {
        - Create all ziplines in scope
    }

    Example: /!\ Values are for the example /!\
    ZiplineUtility zipline
    zipline = Zipline_Register( "ziplineName", < 0, 0, 0 >, < 0, 92, 0 >, < 0, 2000, 0 >, < 0, -40, 0 > )
        Zipline_SetLengthScale( zipline, 0.96 )
        Zipline_SetSkin( zipline, eZiplineSkinType.ENTIRE, eZiplineSkinType.INVISIBLE )
        Zipline_EnableRestPoint ( zipline )
        Zipline_CreatePanel( zipline, < 0, 60, 0 >, < 0, 38, 0 >, ePanelSkinType.STAND )
    RegisteredZipline_Init( zipline )
*/
