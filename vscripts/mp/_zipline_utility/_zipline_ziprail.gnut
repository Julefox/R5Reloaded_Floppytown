untyped

global function ZipRail_InitSupport
global function ZipRail_Init


void function ZipRail_InitSupport( ZiplineUtility zipline )
{
    ZiplineVars vars = zipline.vars

    zipline.moveRopeZiplinePos.append( zipline.startZiplinePos )
    
    // Entities Declaration
    array< entity > entityArray = [ ] ; entity startSupport ; entity startArm

    for ( int i = 0 ; i < zipline.moveRopePathPos.len() ; i++ )
    {
        vector  startEntityPos = zipline.moveRopePathPos[ i ]
        vector  startEntityAng = zipline.moveRopePathAng[ i ]
        int     pathSkin       = zipline.moveRopePathSkin[ i ]

        // Offset for arm heigth | locked between 160.0 (min) / 280.0 (max)
        float minOffset = ARM_MIN_OFFSET ; float maxOffset = ARM_MAX_OFFSET ; float startArmOffset = vars.startArmOffset
        if ( startArmOffset < minOffset ) startArmOffset = minOffset else if ( startArmOffset > maxOffset ) startArmOffset = maxOffset

        // Temporary angle for the right position | Position offsets calculation
        vector startEntityPosArm = startEntityPos + < -1, -2, startArmOffset > ; vector angOffset = < 0, 90, 0 >
        vector tempAng = < 0, 0, 0 > ; vector tempAngForSupport = < 0, 90, 0 > ; vector startArmAng = startEntityAng - angOffset

        switch ( pathSkin ) // With / Without support selection
        {
            case eZiplineSkinType.ENTIRE: // With support
                startSupport    = Zipline_CreateProp( ZIPLINE_SUPPORT, startEntityPos, tempAngForSupport )
                startArm        = Zipline_CreateProp( ZIPLINE_ARM, startEntityPosArm, tempAng )
                startArm.SetParent( startSupport ) ; startSupport.SetAngles( startEntityAng )
                break
            case eZiplineSkinType.ARM_ONLY: // Without support
                startArm        = Zipline_CreateProp( ZIPLINE_ARM, startEntityPos, startArmAng )
                break
            case eZiplineSkinType.INVISIBLE: // Invisible model
                startArm        = Zipline_CreateProp( EMPTY_MODEL, startEntityPos, startArmAng )
            default: break
        }

        startArm.kv.solid = 0

        zipline.moveRopeZiplinePos.append( PositionOffsetFromEnt( startArm, -4, -55.5, -12 ) )
    }

    zipline.moveRopeZiplinePos.append( zipline.endZiplinePos )

}


void function ZipRail_Init( ZiplineUtility zipline )
{
    array < entity > ziplinesEntNodes
    array < string > ziplinesEntNames
    array < vector > moveRopeZiplinePos = zipline.moveRopeZiplinePos

    int pointNum = 0
    
    foreach( vector origin in moveRopeZiplinePos )
    {
        string name = UniqueString( "rope_point_" + pointNum )
        ziplinesEntNames.append( name ) ; pointNum++
    }

    int i = 0

    foreach( vector origin in moveRopeZiplinePos )
    {
        if ( i == 0 )
        {
            entity ziplineEnt = CreateZiplinePath( origin, "move_rope", ziplinesEntNames[i], ziplinesEntNames[i + 1], false )
            ziplinesEntNodes.append( ziplineEnt )
        }
        if ( i != 0 && i < moveRopeZiplinePos.len() - 1 )
        {
            entity ziplineEnt = CreateZiplinePath( origin, "keyframe_rope", ziplinesEntNames[i], ziplinesEntNames[i + 1], false )
            ziplinesEntNodes.append( ziplineEnt )
        }
        else
        {
            entity ziplineEnt = CreateZiplinePath( origin, "keyframe_rope", ziplinesEntNames[i], "", true )
            ziplinesEntNodes.append( ziplineEnt )
        }

        i++

    }

    foreach( entity ent in ziplinesEntNodes )
    {
        DispatchSpawn( ent )
    }
}


entity function CreateZiplinePath( vector origin, string entityType, string pointname, string NextKey, bool end )
{
    entity rope = CreateEntity( entityType )

    SetTargetName( rope, pointname )
    
    if( !end ) rope.kv.NextKey = NextKey

    rope.kv.MoveSpeed                   = 200
    rope.kv.Slack                       = 25
    rope.kv.Subdiv                      = "3"
    rope.kv.Width                       = "2"
    rope.kv.Type                        = "0"
    rope.kv.TextureScale                = "1"
    rope.kv.RopeMaterial                = "cable/zipline.vmt"
    rope.kv.PositionInterpolator        = 0
    rope.kv.Zipline                     = "1"
    rope.kv.ZiplineAutoDetachDistance   = "150"
    rope.kv.ZiplineSagEnable            = "0"
    rope.kv.ZiplineSagHeight            = "50"
    rope.SetOrigin( origin )

    return rope
}
