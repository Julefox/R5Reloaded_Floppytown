// stub script

global function Bombardment_Init
global function VerifyBombardmentWeapon
global function Bombardment_MortarBarrageFocused
global function Bombardment_MortarBarrageDetCord

void function Bombardment_Init()
{

}

entity function VerifyBombardmentWeapon( entity owner, string weapon )
{
	foreach(entity w in GetAllPlayerWeapons(owner))
	{
		if(w.GetWeaponClassName() == weapon)
			return w
	}
    return null
}

void function Bombardment_MortarBarrageFocused( entity weapon, asset effect, vector origin, float radius, int intensity, float duration, float delay )
{
	wait delay
	
	entity owner = weapon.GetOwner()
	
	if(!IsValid(owner))
		return
	
	string fire_sound_1_player_3p = GetWeaponInfoFileKeyField_GlobalString(weapon.GetWeaponClassName(), "fire_sound_1_player_3p")
	string sound_incoming = GetWeaponInfoFileKeyField_GlobalString(weapon.GetWeaponClassName(), "sound_incoming")
	float projectile_launch_speed = GetWeaponInfoFileKeyField_GlobalFloat(weapon.GetWeaponClassName(), "projectile_launch_speed")
	
	int damageFlags = weapon.GetWeaponDamageFlags()
	WeaponFireGrenadeParams fireGrenadeParams
	fireGrenadeParams.pos = origin+<0,0,10000>
	fireGrenadeParams.vel = <0,0,0>
	fireGrenadeParams.angVel = <0,0,0>
	fireGrenadeParams.fuseTime = 8
	fireGrenadeParams.scriptTouchDamageType = (damageFlags & ~DF_EXPLOSION) // when a grenade "bonks" something, that shouldn't count as explosive.explosive
	fireGrenadeParams.scriptExplosionDamageType = damageFlags
	fireGrenadeParams.clientPredicted = false
	fireGrenadeParams.lagCompensated = true
	fireGrenadeParams.useScriptOnDamage = true
	
	float endTime = Time() + duration
	
	bool isFirst = true
	
	while(Time() < endTime)
	{		
		wait 1.0/intensity
		
		if (weapon == null || !IsValid(weapon))
			return
		
		vector landRadiusOffset = <RandomFloatRange(-radius,radius)/2,RandomFloatRange(-radius,radius)/2,0>
		
		entity projectile = weapon.FireWeaponGrenade( fireGrenadeParams )
		
		if (isFirst)
		{
			EmitSoundOnEntity( projectile, fire_sound_1_player_3p )
			isFirst = false
		}
		EmitSoundOnEntity( projectile, sound_incoming )
		
		TraceResults trace = TraceLine( fireGrenadeParams.pos + landRadiusOffset, origin+landRadiusOffset - <0,0,8000>, null, TRACE_MASK_NPCWORLDSTATIC, TRACE_COLLISION_GROUP_NONE )
		vector skyOriginToGround = trace.endPos - fireGrenadeParams.pos;
		// The reason we are going from the sky to (sky + sky->ground + (norm(sky->ground) * 100)) is that if we just went to ground (trace.endPos), we would rarely get markers because it would 
		// rarely actually "hit" the ground and instead just stop there, not hitting anything, not making a marker.
		TraceResults trace2 = TraceLine (fireGrenadeParams.pos, fireGrenadeParams.pos + skyOriginToGround + (Normalize(skyOriginToGround) * 100), null, TRACE_MASK_NPCWORLDSTATIC, TRACE_COLLISION_GROUP_NONE)
		vector groundPos2 = trace2.endPos

		vector velocity = Normalize(trace2.endPos - fireGrenadeParams.pos) * projectile_launch_speed

		projectile.SetAngles(<90,0,0>)
		projectile.SetOrigin(fireGrenadeParams.pos)
		projectile.SetVelocity(velocity)
		projectile.kv.gravity = 0

		if ( IsValid( trace2.hitEnt ) )
		{
			entity marker = StartParticleEffectInWorld_ReturnEntity( GetParticleSystemIndex( effect ), trace2.endPos, <0,0,0> )
			AddToUltimateRealm( owner, marker )
			EntFireByHandle( marker, "Kill", "", 2, null, null ) // kill after 2s
		}
	}
}

void function Bombardment_MortarBarrageDetCord( entity weapon, asset effect, vector direction, vector origin, vector projectileOrigin, float width, float perStep, int count, float interval, float delay )
{
	wait delay
	
	entity owner = weapon.GetOwner()
	
	if (!IsValid(owner))
		return
	
	string fire_sound_1_player_3p = GetWeaponInfoFileKeyField_GlobalString(weapon.GetWeaponClassName(), "fire_sound_1_player_3p")
    // todo sound effects for warnings ("incoming!")
	float projectile_launch_speed = GetWeaponInfoFileKeyField_GlobalFloat(weapon.GetWeaponClassName(), "projectile_launch_speed")
	
	int damageFlags = weapon.GetWeaponDamageFlags()
	WeaponFireMissileParams fireGrenadeParams
	fireGrenadeParams.pos = origin+<0,0,10000>
	fireGrenadeParams.dir = <0, 0, 0>
	fireGrenadeParams.speed = 2
	fireGrenadeParams.scriptTouchDamageType = (damageFlags & ~DF_EXPLOSION) // when a grenade "bonks" something, that shouldn't count as explosive.explosive
	fireGrenadeParams.scriptExplosionDamageType = damageFlags
	fireGrenadeParams.doRandomVelocAndThinkVars = false
	fireGrenadeParams.clientPredicted = false

	bool isFirst = true

	float bombCount = width / perStep
	vector missileOrigin = projectileOrigin + (direction * perStep * ((count / 2) + 1)) + <0, 0, 15000>
	for (int cur = 0; cur < count; cur++) {
		vector stepCenter = projectileOrigin + (direction * perStep * (cur + 1))
		vector rot270 = <direction.y, -direction.x, direction.z> * (width / 2)
		bool even = cur % 2 == 0;
		vector lineStart = even ? (stepCenter - rot270) : (stepCenter + rot270)
		vector lineDirection = Normalize(rot270)
		lineDirection = <-lineDirection.x, -lineDirection.y, lineDirection.z>
		for (int curStep = 0 ; curStep < bombCount ; curStep++) {
			wait (interval / (2 * bombCount))
			vector targetPosition = even ? (lineStart - (lineDirection * perStep * curStep) - (lineDirection * (perStep / 2))) : (lineStart + (lineDirection * perStep * curStep) + (lineDirection * (perStep / 2)))
			entity projectile = weapon.FireWeaponMissile( fireGrenadeParams )
		
			if (isFirst)
			{
				EmitSoundOnEntity( projectile, fire_sound_1_player_3p )
				isFirst = false
			}
			// todo sounds for incoming warning EmitSoundOnEntity( projectile, sound_incoming )
			
			projectile.SetAngles(<90,0,0>)
			projectile.SetOrigin(missileOrigin)
			vector velocity = Normalize(targetPosition - missileOrigin) * projectile_launch_speed
			projectile.kv.gravity = 0
			projectile.SetVelocity(velocity)
		}
	}
}
