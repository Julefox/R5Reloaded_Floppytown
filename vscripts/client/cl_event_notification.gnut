untyped

global function CLEventNotification_Init
global function ServerCallback_EventNotification
global function EventNotification
global function SetEventNotificationHATT
global function SetTimedEventNotificationHATT
global function SetEventNotification
global function SetTimedEventNotification
global function HideEventNotification
global function AddEventNotificationCallback
global function AddPermanentEventNotification
global function RestorePermanentEventNotification
global function EmitCountdownSound

global function SetEventNotificationEndingOnSignals //Should go away once we make gamemodes/etc register their own EventNotifications as opposed to adding to EventNotification()

const EN_SHOW_OVER_SCREENFADE = 0x00000001

void function CLEventNotification_Init()
{
	RegisterSignal( "SetEventNotification" )
	RegisterEntityVarChangeCallback( "player", "permanentEventNotification", PermanentEventNotificationChanged )
	AddCreatePilotCockpitCallback( CockpitCreate_RestorePermanentEventNotification )
	AddCreateTitanCockpitCallback( CockpitCreate_RestorePermanentEventNotification )
}

void function ServerCallback_EventNotification( int eventID, int eHandle, var eventVal )
{
	entity ent
	if ( eHandle )
		ent = GetEntityFromEncodedEHandle( eHandle )

	EventNotification( eventID, ent, eventVal )
}

void function EventNotification( int eventID, entity ent, var eventVal )
{
	entity player = GetLocalClientPlayer()

	switch ( eventID )
	{
		case  eEventNotifications.RoundWinningKillReplayCancelled:
			SetTimedEventNotification( 5.0, "#ROUND_WINNING_KILL_REPLAY_CANCELLED", null, null, EN_SHOW_OVER_SCREENFADE )
			break

		case eEventNotifications.Grapple_WasGrappled_ByPilot:
		case eEventNotifications.Grapple_WasGrappled_ByTitan:
			SmartAmmo_SetStatusWarning( "#GRAPPLED_WARNING", 3.0 )
			//AnnouncementData announcement = Announcement_Create( "#GRAPPLED_WARNING" )
			//
			//if ( eventID == eEventNotifications.Grapple_WasGrappled_ByPilot )
			//	Announcement_SetSubText( announcement, "#GRAPPLED_WARNING_HINT_PILOT" )
			//else
			//	Announcement_SetSubText( announcement, "#GRAPPLED_WARNING_HINT_TITAN" )
			//
			//Announcement_SetPurge( announcement, true )
			//Announcement_SetDuration( announcement, 2.0 )
			//Announcement_SetSoundAlias( announcement,  "Weapon_TetherGun_Attach_1P" )
			//Announcement_SetHideOnDeath( announcement, false )
			//AnnouncementFromClass( player, announcement )
			break

		case eEventNotifications.BLEEDOUT_SelfHealPrompt:
			//By default notification messages will not display if the new message is the same as the last message.
			if ( player.p.lastEventNotificationText == "#BLEEDOUT_USE_SELF_RES_DYNAMIC" )
				player.p.lastEventNotificationText = ""
			SetTimedEventNotification( 1.0, "#BLEEDOUT_USE_SELF_RES_DYNAMIC" )
			break

		case eEventNotifications.Clear:
			HideEventNotification()
			break

		default:
			clGlobal.eventNotificationCallbacks[ eventID ]( ent, eventVal )
			break
	}
}

void function SetEventNotificationHATT( string eventText, eventHATT = null, eventVal = 0, int flags = 0 )
{
	SetTimedEventNotification( 0, eventText, eventHATT, eventVal )
}

void function SetTimedEventNotificationHATT( float duration, string eventText, eventHATT, eventVal = 0, int flags = 0 )
{
	entity player = GetLocalClientPlayer()

	if ( eventText != player.p.lastEventNotificationText )
	{
		Hud_SetAlpha( player.cv.hud.s.eventNotification, 0 )
		Hud_FadeOverTime( player.cv.hud.s.eventNotification, 255, 1.0 )
	}
	else
	{
		Hud_SetAlpha( player.cv.hud.s.eventNotification, 255 )
	}
	Hud_Show( player.cv.hud.s.eventNotification )

	Hud_SetAutoText( player.cv.hud.s.eventNotification, eventText, eventHATT, eventVal )
	player.p.lastEventNotificationText = eventText

	if ( !Hud_IsAutoText( player.cv.hud.s.eventNotification ) )
		Hud_EnableAutoText( player.cv.hud.s.eventNotification )

	player.Signal( "SetEventNotification" )

	int zPos = 1000 // there is no base Z in code, this value should match the default in HudScripted_mp.res
	if ( flags & EN_SHOW_OVER_SCREENFADE )
		zPos = 3501

	Hud_SetZ( player.cv.hud.s.eventNotification, zPos )

	if ( duration )
		thread HideEventNotificationWithDelay( duration )
}

void function SetEventNotification( string eventText, eventArg1 = null, eventArg2 = null, int flags = 0 )
{
	SetTimedEventNotification( 9999.0, eventText, eventArg1, eventArg2, flags )
}

void function SetTimedEventNotification( float duration, string eventText, eventArg1 = null, eventArg2 = null, int flags = 0 )
{
	entity player = GetLocalClientPlayer()

	printt( "SetTimedEventNotification", duration, eventText, player.p.lastEventNotificationText )

	if ( eventText == player.p.lastEventNotificationText )
	{
		//player.cv.hud.s.eventNotification.SetAlpha( 0 )
		//player.cv.hud.s.eventNotification.FadeOverTime( 255, 1.0 )
		HidePlayerHint( eventText )
	}
	else
	{
		//player.cv.hud.s.eventNotification.SetAlpha( 255 )
		AddPlayerHint( duration, 0.25, $"", eventText, eventArg1, eventArg2 )
	}
	//player.cv.hud.s.eventNotification.Show()

	//if ( player.cv.hud.s.eventNotification.IsAutoText() )
	//	player.cv.hud.s.eventNotification.DisableAutoText()

	//player.cv.hud.s.eventNotification.SetText( eventText, eventArg1, eventArg2 )
	player.p.lastEventNotificationText = eventText

	player.Signal( "SetEventNotification" )

	//local zPos = 1000 // there is no base Z in code, this value should match the default in HudScripted_mp.res
	//if ( flags & EN_SHOW_OVER_SCREENFADE )
	//	zPos = 3501

	//player.cv.hud.s.eventNotification.SetZ( zPos )

	if ( duration && duration < 9999 )
		thread HideEventNotificationWithDelay( duration )
}

void function SetEventNotificationEndingOnSignals( string eventText, signalArray, eventArg1 = null, eventArg2 = null, int flags = 0 )
{
	SetEventNotification( eventText, eventArg1, eventArg2, flags )
	thread HideEventNotificationOnSignals( signalArray )
}

void function HideEventNotification()
{
	ClearEventNotification()
	RestorePermanentEventNotification()
}

void function HideEventNotificationWithDelay( float delay )
{
	Assert( delay > 0.0 )
	entity player = GetLocalClientPlayer()

	player.Signal( "SetEventNotification" )
	player.EndSignal( "SetEventNotification" )

	wait delay

	HideEventNotification()
}

void function HideEventNotificationOnSignals( signalArray )
{
	entity player = GetLocalClientPlayer()
	foreach ( signal in signalArray )
		player.EndSignal( signal )

	OnThreadEnd(
		function() : ()
		{
			HideEventNotification()
		}
	)

	WaitForever()
}

void function RestorePermanentEventNotification()
{
	if ( IsWatchingReplay() )
		return

	entity player = GetLocalClientPlayer()
	int permanentEventNotificationID = expect int( player.nv.permanentEventNotification )
	//printt( "HideEventNotification. PermEventNotificationID: " + permanentEventNotificationID )
	if ( permanentEventNotificationID != ePermanentEventNotifications.Empty )
	{
		Assert( permanentEventNotificationID in clGlobal.permanentEventNotifications )
		SetEventNotification( clGlobal.permanentEventNotifications[ permanentEventNotificationID ] )
	}
}

void function CockpitCreate_RestorePermanentEventNotification( entity cockpit, entity player )
{
	RestorePermanentEventNotification()
}

//Does not restore PermanentEventNotifications!
void function ClearEventNotification()
{
	entity player = GetLocalClientPlayer()
	if ( !player.p.playerScriptsInitialized )
		return

	HidePlayerHint( player.p.lastEventNotificationText )
	//player.cv.hud.s.eventNotification.FadeOverTime( 0, 1.0 )
}

void function EmitCountdownSound( float endCountdownTime, string soundAlias = "UI_InGame_MarkedForDeath_CountdownToMarked" )
{
	//player.EndSignal( "OnDestroy" ) //Don't end signal on destroy because if you are watching kill replay while counting down to marked, we don't want this thread to end

	float remainingTime = endCountdownTime - Time()
	while ( remainingTime > 0 )
	{
		entity player = GetLocalClientPlayer() //Keep getting handle to local player because we want to keep playing this sound throughout kill replay
		EmitSoundOnEntity( player, soundAlias )
		wait 1.0
		remainingTime -= 1.0
	}
}

void function AddEventNotificationCallback( int eventNotificationID, void functionref( entity, var ) callbackFunc )
{
	Assert( !(eventNotificationID in clGlobal.eventNotificationCallbacks), "Already have callbackFunc : " + string( clGlobal.eventNotificationCallbacks[ eventNotificationID ] ) + " associated with eEventNotificationID: " + eventNotificationID )
	clGlobal.eventNotificationCallbacks[ eventNotificationID ] <- callbackFunc
}

void function AddPermanentEventNotification( int enumValue, string displayString )
{
	clGlobal.permanentEventNotifications[ enumValue ] <- displayString
}

// TODO: Not typed since RegisterEntityVarChangeCallback is untyped
function PermanentEventNotificationChanged( player, newValue, oldValue )
{
	Assert( player == GetLocalClientPlayer() )
	expect int( newValue )
	expect int( oldValue )

	if ( newValue == ePermanentEventNotifications.Empty )
	{
		if ( !IsValid( player ) || !player.cv )
			return

		if ( newValue == oldValue )
			//Tried to clear PermanentEventNotifications twice. Just exit
			return

		Assert( oldValue in clGlobal.permanentEventNotifications )

		string eventNotificationText = clGlobal.permanentEventNotifications[ oldValue ]

		if ( player.p.lastEventNotificationText != eventNotificationText )
			return

		ClearEventNotification()
	}
	else
	{
		Assert( newValue in clGlobal.permanentEventNotifications )
		string eventNotificationText = clGlobal.permanentEventNotifications[ newValue ]

		SetEventNotification( eventNotificationText )
	}
}
