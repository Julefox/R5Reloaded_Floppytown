untyped

global function ClDamageIndicator_Init
global function Create_DamageIndicatorHUD
global function GrenadeArrowThink
global function RumbleForTitanDamage

global function ServerCallback_PlayerTookDamage
//global function ClientCodeCallback_OnMissileCreation
global function ClientCodeCallback_CreateGrenadeIndicator

global function ShowGrenadeArrow

global function SCB_AddGrenadeIndicatorForEntity

const DAMAGEARROW_FADEANIM = "damage_fade"
const DAMAGEARROW_DURATION = 2.5
const DAMAGEARROW_SMALL = 0
const DAMAGEARROW_MEDIUM = 1
const DAMAGEARROW_LARGE = 2

const float DAMAGEHUD_GRENADE_DEBOUNCE_TIME = 0.4
const float DAMAGEHUD_GRENADE_DEBOUNCE_TIME_LOWSPEED = 0.15
const float DAMAGEHUD_GRENADE_DEBOUNCE_TIME_LOWSPEED_VELOCITYCUTOFF = 500.0

const float GRENADE_INDICATOR_LIMIT = 128.0


struct {
	array<table> damageArrows
	int currentDamageArrow = 0
	int numDamageArrows = 16
	float damageArrowFadeDuration = 1.0
	float damageArrowTime = 0.0
	vector damageArrowAngles = <0,0,0>
	vector damageArrowPointCenter = <0,0,0>

	table whizByFX = {
		small = null,
		large = null,
		titan = null,
	}

	array<table> arrowIncomingAnims = [
		{ anim = "damage_incoming_small", duration = 1.5 },
		{ anim = "damage_incoming", duration = 1.75 },
		{ anim = "damage_incoming_large", duration = 2.00 },
	]

	int damageIndicatorCount = 0
	array<entity> liveGrenadeIndicators
} file

void function ClDamageIndicator_Init()
{
	RegisterSignal( "CriticalHitReceived" )

	AddCreateCallback( "titan_cockpit", DamageArrow_CockpitInit )
	Waypoints_RegisterCustomType( WAYPOINTTYPE_THREAT_INDICATOR, AddThreatIndicator )

	PrecacheParticleSystem( $"P_wpn_grenade_frag_icon" )
	PrecacheParticleSystem( $"P_wpn_grenade_frag_blue_icon" )
	PrecacheParticleSystem( $"P_wpn_grenade_smoke_icon" )

	if ( !IsLobby() )
		AddCallback_EntitiesDidLoad( InitDamageArrows )
}

string function DevBuildAttackerDesc( entity localViewPlayer, entity ent )
{
	if ( ent == null )
		return "<null>"

	if ( localViewPlayer == ent )
		return "<self>"

	if ( ent.IsPlayer() )
		return ("'" + ent.GetPlayerName() + "' " + ent.GetPlayerSettings())

	entity bossPlayer = ent.GetBossPlayer()
	string ownerString = ((bossPlayer != null) ? (bossPlayer.GetPlayerName() + "'s ") : "")

	var classname = ent.GetNetworkedClassName()
	string debugName = (classname != null) ? expect string( classname ) : ent.GetCodeClassName()
	return (ownerString + debugName)
}

void function DebugTookDamagePrint( entity localViewPlayer, entity attacker, float damage, int damageSourceId, bool isHeadShot, bool isKillShot, bool isCritical )
{
	Assert( localViewPlayer )
	string attackerDesc = DevBuildAttackerDesc( localViewPlayer, attacker )
	string timePrint = format( "%d:%.2f", FrameCount(), PlatformTime() )
	printt(
				"{"+timePrint+"} TOOK DAMAGE: " + damage +
						(isHeadShot ? " (headshot)" : "") +
						(isCritical ? " (critical)" : "") +
						(isKillShot ? " (KILLED)" : "") +
				"   " + attackerDesc +
				"  w/ " + GetObitFromDamageSourceID( damageSourceId )
	)
}

void function PlayVictimHeadshotConfirmation( bool isKillShot )
{
	entity localViewPlayer = GetLocalViewPlayer()
	if ( localViewPlayer == null )
		return

	if ( isKillShot )
		EmitSoundOnEntity( localViewPlayer, "Player.Hitbeep_headshot.Kill.Human_3P_vs_1P" )
	else
		EmitSoundOnEntity( localViewPlayer, "Player.Hitbeep_headshot.Human_3P_vs_1P" )
}

void function RumbleForPilotDamage( float damageAmount, int damageType, int damageSourceId )
{
	bool isDeathField = (damageSourceId == eDamageSourceId.deathField)

	if ( isDeathField )
	{
		Rumble_Play( "death_field_pain", {} )
		return
	}

	Rumble_Play( "rumble_pilot_hurt", {} )
}

void function RumbleForTitanDamage( float damageAmount )
{
	string rumbleName
	if ( damageAmount < 500 )
		rumbleName = "titan_damaged_small"
	else if ( damageAmount < 1000 )
		rumbleName = "titan_damaged_med"
	else
		rumbleName = "titan_damaged_big"

	Rumble_Play( rumbleName, {} )
}

bool function ShouldShowMeleeFlashForDamage( float damage, int damageType, int damageSourceId )
{
	if ( !(damageType & DF_MELEE) )
		return false

	if ( damageSourceId == eDamageSourceId.prowler_melee )
		return false

	return true
}

void function DoDamageFlashForDamageRecieved( entity player, float damage, int damageType, int damageSourceId )
{
	bool isDeathField = (damageSourceId == eDamageSourceId.deathField)

	if ( isDeathField )
	{
		ScreenFlash( 0.7, 0.5, 0.5, 0.1, 2.0 )
		return
	}

	if ( ShouldShowMeleeFlashForDamage( damage, damageType, damageSourceId ) )
	{
		ScreenFlash( 15.0, 15.0, 15.0, 0.1, 0.2 )
		return
	}

	// Non-regen health:
	//float healthFrac = (float( player.GetHealth() ) / float( player.GetMaxHealth() ))
	//float redScale = GraphCapped( healthFrac, 0.0, 1.0, 0.75, 0.4 )
	//float holdTime = GraphCapped( healthFrac, 0.0, 1.0, 0.25, 0.1 )
	//float fadeTime = GraphCapped( healthFrac, 0.0, 1.0, 0.5, 0.15 )
	//ScreenFlash( redScale * 2, 0.5, 0.5, holdTime, fadeTime )

	float holdTime = GraphCapped( min( damage / 100.0, 1.0 ), 0.0, 1.0, 0.0, 0.25 )
	ScreenFlash( 2, 2, 2, holdTime, 0.2 )
}

void function ServerCallback_PlayerTookDamage( float damage, float x, float y, float z, int damageType, int damageSourceId, attackerEHandle )
{
	if ( IsWatchingThirdPersonKillReplay() )
		return

	entity attacker = attackerEHandle ? GetHeavyWeightEntityFromEncodedEHandle( attackerEHandle ) : null
	entity localViewPlayer = GetLocalViewPlayer()
	vector damageOrigin = <x,y,z>

	bool isHeadShot = (damageType & DF_HEADSHOT) ? true : false
	bool isKillShot = (damageType & DF_KILLSHOT) ? true : false

	if ( isHeadShot )
		PlayVictimHeadshotConfirmation( isKillShot )

	//Jolt view if player is getting meleed
	//if ( damageSourceId == eDamageSourceId.human_melee )
	if ( damageType & DF_MELEE )
	{
		vector joltDir = Normalize( localViewPlayer.CameraPosition() - damageOrigin )
		localViewPlayer.CockpitJolt( joltDir * 100.0,  0.25 )

		//clear melee assist when you get meleed
		localViewPlayer.Lunge_ClearTarget()
	}

	if ( DebugVictimClientDamageFeedbackIsEnabled() && !IsWatchingReplay() )
	{
		bool isCritical = (damageType & DF_CRITICAL) ? true : false

		DebugTookDamagePrint( localViewPlayer, attacker, damage, damageSourceId, isHeadShot, isKillShot, isCritical )
	}

	RumbleForPilotDamage( damage, damageType, damageSourceId )

	DamageIndicators( damageOrigin, attacker, damageSourceId )

	DoDamageFlashForDamageRecieved( localViewPlayer, damage, damageType, damageSourceId )

	switch ( damageSourceId )
	{
		case eDamageSourceId.deathField: // Circle damage
			EmitSoundOnEntity( localViewPlayer, "Survival_Circle_ElectricalDamage_1P" )
			break
		case eDamageSourceId.burn:
			EmitSoundOnEntity( localViewPlayer, "flesh_fire_damage_1p" )
			break
	}

/*
	if ( GetCurrentPlaylistVarBool( "log_damage_to_obituary", false ) )
	{
		string logStr
		string attackerDisplayName = ( !((attacker == null) || (attacker == localViewPlayer)) ) ? GetAttackerDisplayNamesFromClassname( attacker ).attackerName : ""
		if ( attackerDisplayName.len() == 0 )
			logStr = format( "Took `3%d`0 damage (%s).", damage, Localize( GetObitFromDamageSourceID( damageSourceId ) ) )
		else
			logStr = format( "Hit by `2%s`0 for `3%d`0 damage (%s).", attackerDisplayName, damage, Localize( GetObitFromDamageSourceID( damageSourceId ) ) )

		vector damageNumberColor = (isHeadShot) ? (4.0 * BURN_COLOR) : (1.5 * BURN_COLOR)
		vector backgroundColor = 0.25 * TEAM_COLOR_ENEMY
		float backgroundAlpha = 0.5
		Obituary_Print_Localized( logStr, TEAM_COLOR_YOU, TEAM_COLOR_ENEMY, damageNumberColor, backgroundColor, backgroundAlpha )
	}
*/

	foreach ( callback in clGlobal.onLocalPlayerTookDamageCallback )
		callback( damage, damageOrigin, damageType, damageSourceId, attacker )

	if ( damageSourceId in clGlobal.onLocalPlayerTookDamageTypeCallback )
	{
		foreach ( callback in clGlobal.onLocalPlayerTookDamageTypeCallback[ damageSourceId ] )
			callback( damage, damageOrigin, damageType, damageSourceId, attacker )
	}
}

/*
void function ClientCodeCallback_OnMissileCreation( entity missileEnt, string weaponName, bool firstTime )
{
}
*/

void function ClientCodeCallback_CreateGrenadeIndicator( entity missileEnt, string weaponName )
{
	if ( !IsValid( missileEnt ) )
		return

	//Called for all projectiles, not just missiles.
	TryAddGrenadeIndicator( missileEnt )
}


void function DamageIndicators( vector origin, entity attacker, int damageSourceId )
{
	if ( !level.clientScriptInitialized )
		return

	if ( IsWatchingThirdPersonKillReplay() )
		return

	if ( !ShouldShowDamageArrows( damageSourceId ) )
		return

	entity localViewPlayer = GetLocalViewPlayer()
	if ( !IsValid( localViewPlayer ) )
		return

	int arrowType = DAMAGEARROW_MEDIUM
	if ( IsValid( attacker ) )
	{
		if ( attacker == localViewPlayer )
			return

		if ( attacker.IsTitan() )
			arrowType = DAMAGEARROW_MEDIUM
		else if ( attacker.IsPlayer() )
			arrowType = DAMAGEARROW_SMALL
		else
			arrowType = DAMAGEARROW_SMALL
	}

	const int DAMAGE_INDICATOR_STYLE_NONE = -1
	const int DAMAGE_INDICATOR_STYLE_2D_ONLY = 0
	const int DAMAGE_INDICATOR_STYLE_BOTH = 1
	const int DAMAGE_INDICATOR_STYLE_3D_ONLY = 2
	int styleSetting = (localViewPlayer.IsTitan() ? DAMAGE_INDICATOR_STYLE_2D_ONLY : GetConVarInt( "damage_indicator_style_pilot" ))
	bool show2DIndicator = (styleSetting == DAMAGE_INDICATOR_STYLE_2D_ONLY || styleSetting == DAMAGE_INDICATOR_STYLE_BOTH)
	bool show3DIndicator = (styleSetting == DAMAGE_INDICATOR_STYLE_3D_ONLY || styleSetting == DAMAGE_INDICATOR_STYLE_BOTH)

	if ( show2DIndicator )
		thread DamageIndicatorRui( origin, arrowType )

	if ( show3DIndicator )
		ShowDamageArrow( localViewPlayer, origin, arrowType, attacker )
}

bool function ShouldShowDamageArrows( int damageSourceId )
{
	switch ( damageSourceId )
	{
		case eDamageSourceId.outOfBounds:
		case eDamageSourceId.deathField:
		case eDamageSourceId.damagedef_grenade_gas:
		case eDamageSourceId.mp_weapon_tesla_trap:
		case eDamageSourceId.burn:
			return false
	}

	return true
}

const float DAMAGE_INDICATOR_DURATION = 4.0

void function DamageIndicatorRui( vector damageOrigin, int arrowType )
{
	clGlobal.levelEnt.EndSignal( "KillReplayStarted" )
	clGlobal.levelEnt.EndSignal( "KillReplayEnded" )

	// slop
	float distance = Length( damageOrigin - GetLocalViewPlayer().CameraPosition() )
	float randomRange = GraphCapped( distance, 0.0, 2048, 0.0, 256.0 )
	damageOrigin = <damageOrigin.x + RandomFloatRange( randomRange, -randomRange ), damageOrigin.y + RandomFloatRange( randomRange, -randomRange ), damageOrigin.z>

	float startTime = Time()

	var rui = RuiCreate( $"ui/damage_indicator.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 0 )
	RuiSetResolutionToScreenSize( rui )
	RuiSetGameTime( rui, "startTime", startTime )
	RuiSetFloat( rui, "duration", DAMAGE_INDICATOR_DURATION )
	RuiSetInt( rui, "attackerType", arrowType )

	file.damageIndicatorCount++
	int damageIndicatorThreshold = file.damageIndicatorCount + 8

	OnThreadEnd(
		function() : ( rui )
		{
			RuiDestroy( rui )
		}
	)

	while ( Time() - startTime < DAMAGE_INDICATOR_DURATION && file.damageIndicatorCount < damageIndicatorThreshold )
	{
		vector vecToDamage = damageOrigin - GetLocalViewPlayer().CameraPosition()
		vecToDamage.z = 0
		vecToDamage = Normalize( vecToDamage )
		RuiSetFloat3( rui, "vecToDamage2D", vecToDamage )
		RuiSetFloat3( rui, "camVec2D", Normalize( AnglesToForward( <0, GetLocalViewPlayer().CameraAngles().y, 0> ) ) )
		RuiSetFloat( rui, "sideDot", vecToDamage.Dot( CrossProduct( <0,0,1>, Normalize( AnglesToForward( <0, GetLocalViewPlayer().CameraAngles().y, 0> ) ) ) ) )
		WaitFrame()
	}
}

void function ShowGrenadeArrow( entity player, entity grenade, float damageRadius, float startDelay, bool requireLos = true )
{
	thread GrenadeArrowThink( player, grenade, damageRadius, startDelay, requireLos )
}

void function AddThreatIndicator( entity waypoint )
{
	float radius = waypoint.GetWaypointFloat( 0 )

	entity player = GetLocalViewPlayer()
	ShowGrenadeArrow( player, waypoint, radius, 0, false )
}

vector function GetRandomOriginWithinBounds( entity ent )
{
	vector boundingMins = ent.GetBoundingMins()
	vector boundingMaxs = ent.GetBoundingMaxs()

	vector randomOffset = <RandomFloatRange( boundingMins.x, boundingMaxs.x ), RandomFloatRange( boundingMins.y, boundingMaxs.y ), RandomFloatRange( boundingMins.z, boundingMaxs.z )>

	return ent.GetOrigin() + randomOffset
}

void function GrenadeArrowThink( entity player, entity grenade, float damageRadius, float startDelay, bool requireLos, string requiredPlayerState = "any" )
{
	EndSignal( grenade, "OnDeath" ) //On death added primarily for frag_drones
	EndSignal( grenade, "OnDestroy" )
	EndSignal( player, "OnDeath" )

	wait startDelay

	asset grenadeModel = GetIndicatorModel( grenade )
	vector grenadeOffset = <-5,0,0>

	entity arrow = CreateClientSidePropDynamic( <0,0,0>, <0,0,0>, GRENADE_INDICATOR_ARROW_MODEL )
	entity mdl = CreateClientSidePropDynamic( <0,0,0>, <0,0,0>, grenadeModel )
	EndSignal( arrow, "OnDestroy")

	if (file.liveGrenadeIndicators.len() + 1 > GRENADE_INDICATOR_LIMIT)
		return

	file.liveGrenadeIndicators.append(arrow)

	OnThreadEnd(
		function() : ( arrow, mdl )
		{
			if ( IsValid( arrow ) )
			{
				file.liveGrenadeIndicators.removebyvalue(arrow)
				arrow.Destroy()
			}
			if ( IsValid( mdl ) )
			{
				mdl.Destroy()
			}
		}
	)

	entity cockpit = player.GetCockpit()
	if ( !cockpit )
		return

	EndSignal( cockpit, "OnDestroy" )

	arrow.SetParent( cockpit, "CAMERA_BASE" )
	arrow.SetAttachOffsetOrigin( <25,0,-4> )

	mdl.SetParent( arrow, "BACK" )
	mdl.SetAttachOffsetOrigin( grenadeOffset )

	float lastVisibleTime = 0
	bool shouldBeVisible = true

	while ( true )
	{
		cockpit = player.GetCockpit()

		switch ( requiredPlayerState )
		{
			case "any":
				shouldBeVisible = true
				break
			case "pilot":
				shouldBeVisible = !player.IsTitan()
				break
			case "titan":
				shouldBeVisible = player.IsTitan()
				break
			default:
				Assert( false, "Invalid player state! Allower states: 'any' 'pilot' 'titan'" )
		}

		if ( shouldBeVisible )
		{
			if ( grenade instanceof C_PlayerWaypoint )
				damageRadius = grenade.GetWaypointFloat( 0 )

			if ( Distance( player.GetOrigin(), grenade.GetOrigin() ) > damageRadius || !cockpit )
			{
				shouldBeVisible = false
			}
			else
			{
				bool tracePassed = false

				if ( requireLos )
				{
					vector traceOffset = GetIndicatorTraceOffset( grenade )
					TraceResults result = TraceLine( grenade.GetOrigin() + traceOffset, GetRandomOriginWithinBounds( player ), grenade, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )

					if ( result.fraction == 1.0 )
						tracePassed = true
				}

				if ( requireLos && !tracePassed )
				{
					shouldBeVisible = false
				}
				else
				{
					shouldBeVisible = true
					lastVisibleTime = Time()
				}
			}
		}

		if ( shouldBeVisible || Time() - lastVisibleTime < 0.25 )
		{
			arrow.EnableDraw()
			mdl.EnableDraw()

			arrow.DisableRenderWithViewModelsNoZoom()
			arrow.EnableRenderWithCockpit()
			arrow.EnableRenderWithHud()
			mdl.DisableRenderWithViewModelsNoZoom()
			mdl.EnableRenderWithCockpit()
			mdl.EnableRenderWithHud()

			vector damageArrowAngles = AnglesInverse( player.EyeAngles() )
			vector vecToDamage = grenade.GetOrigin() - (player.EyePosition() + (player.GetViewVector() * 20.0))

			// reparent for embark/disembark
			if ( arrow.GetParent() == null )
				arrow.SetParent( cockpit, "CAMERA_BASE", true )

			arrow.SetAttachOffsetAngles( damageArrowAngles.AnglesCompose( vecToDamage.VectorToAngles() ) )
		}
		else
		{
			mdl.DisableDraw()
			arrow.DisableDraw()
		}

		WaitFrame()
	}
}

asset function GetIndicatorModel( entity grenade )
{
	if ( grenade.IsNPC() )
	{
		switch ( grenade.GetNetworkedClassName() )
		{
			case "npc_stalker":
				return GRENADE_INDICATOR_STALKER_MODEL

			case "npc_frag_drone":
				return GRENADE_INDICATOR_TICK_MODEL
		}
	}
	else if ( grenade.GetTargetName() == "creeping_bombardment_projectile" )
		return GRENADE_INDICATOR_BOMB

    else if ( grenade.GetTargetName() == CARE_PACKAGE_PROXY )
        return GRENADE_INDICATOR_GENERIC

	if ( grenade instanceof C_PlayerWaypoint )
	{
		switch( grenade.GetWaypointInt( 0 ) )
		{
			case eThreatIndicatorID.GRENADE_INDICATOR_FRAG_MODEL:
				return GRENADE_INDICATOR_FRAG_MODEL
				break

			case eThreatIndicatorID.GRENADE_INDICATOR_SONAR_MODEL:
				return GRENADE_INDICATOR_SONAR_MODEL
				break

			case eThreatIndicatorID.GRENADE_INDICATOR_BOMB:
				return GRENADE_INDICATOR_BOMB
				break

			case eThreatIndicatorID.GRENADE_INDICATOR_GENERIC:
				return GRENADE_INDICATOR_GENERIC
				break

			default:
				return GRENADE_INDICATOR_FRAG_MODEL
		}
	}

	return GRENADE_INDICATOR_FRAG_MODEL
}

vector function GetIndicatorTraceOffset( entity grenade )
{
	if ( grenade.GetTargetName() == "creeping_bombardment_projectile" )
		return <0,0,16>

	return <0,0,0>
}

void function Create_DamageIndicatorHUD()
{
}

void function SCB_AddGrenadeIndicatorForEntity( int team, int ownerHandle, int eHandle, float damageRadius )
{
	if ( !level.grenadeIndicatorEnabled )
		return

	#if R5DEV
		if ( !level.clientScriptInitialized )
			return
	#endif

	entity player = GetLocalViewPlayer()
	entity owner = GetEntityFromEncodedEHandle( ownerHandle )

	entity ent = GetEntityFromEncodedEHandle( eHandle )
	if ( !IsValid( ent ) )
		return

	if ( IsFriendlyTeam( team, player.GetTeam() ) && (owner != player) )
		return

	//TryAddGrenadeIndicator( ent ) // TODO: make function handle non-grenade ents
}

void function TryAddGrenadeIndicator( entity grenade )
{
	#if R5DEV
		if ( !level.clientScriptInitialized )
			return
	#endif

	if ( !level.grenadeIndicatorEnabled )
		return

	entity player = GetLocalViewPlayer()

	// view player may be null when dead
	if ( !IsValid( player ) )
		return

	float radius = grenade.GetExplosionRadius()

	if ( grenade.GetProjectileWeaponSettingInt( eWeaponVar.explosion_damage ) <= 0 )
		return

	if ( player.IsPhaseShifted() )
		return

	if ( !player.DoesShareRealms( grenade ) )
		return

	float startDelay = 0.0
	if ( grenade.GetOwner() == player )
	{
		if ( !grenade.GetProjectileWeaponSettingBool( eWeaponVar.projectile_damages_owner ) && !grenade.GetProjectileWeaponSettingBool( eWeaponVar.explosion_damages_owner ) )
			return

		float relVelocity = Length( grenade.GetVelocity() - player.GetVelocity() )
		if ( relVelocity < DAMAGEHUD_GRENADE_DEBOUNCE_TIME_LOWSPEED_VELOCITYCUTOFF )
			startDelay = DAMAGEHUD_GRENADE_DEBOUNCE_TIME_LOWSPEED
		else
			startDelay = DAMAGEHUD_GRENADE_DEBOUNCE_TIME
	}
	else if ( IsFriendlyTeam( grenade.GetTeam(), player.GetTeam() ) )
	{
		return
	}

	float padding = player.IsTitan() ? 204.0 : 65.0

	//AddGrenadeIndicator( grenade, radius + padding, startDelay, false )
	ShowGrenadeArrow( player, grenade, radius + padding, startDelay )

	//thread ShowRuiGrenadeThreatIndicator( grenade, float( radius ) + padding )
}

void function ShowRuiGrenadeThreatIndicator( entity grenade, float radius )
{
	var rui = RuiCreate( $"ui/grenade_threat_indicator.rpak", clGlobal.topoFullscreenHudPermanent, RUI_DRAW_HUD, 0 )
	//var rui = CreateCockpitRui( $"ui/grenade_threat_indicator.rpak", 0 )
	RuiSetGameTime( rui, "startTime", Time() )
	RuiSetFloat( rui, "damageRadius", radius )
	//RuiTrackFloat3( rui, "pos", grenade, RUI_TRACK_ABSORIGIN_FOLLOW )`
	RuiTrackFloat3( rui, "pos", grenade, RUI_TRACK_POINT_FOLLOW, grenade.LookupAttachment( "BACK" ) )

	OnThreadEnd(
		function() : ( rui )
		{
			RuiDestroy( rui )
		}
	)

	grenade.WaitSignal( "OnDestroy" )
}



void function InitDamageArrows()
{
	for ( int i = 0; i < file.numDamageArrows; i++ )
	{
		table arrowData = {
			grenade = null
			grenadeRadius = 0.0
			damageOrigin = <0,0,0>,
			damageDirection = <0,0,0>,
			endTime = -99.0 + DAMAGEARROW_DURATION,
			startTime = -99.0,
			isDying = false,
			isVisible = false,
			whizby = false, // hack until we get a new model/shader for the whizby indicator - Roger
			attacker = null,
			randomAngle = 0 // Repeated shots from the same attacker randomize the angle of the arrow.
		}

		entity arrow = CreateClientSidePropDynamic( <0,0,0>, <0,0,0>, DAMAGEARROW_MODEL )
		arrow.SetCanCloak( false )
		arrow.SetVisibleForLocalPlayer( 0 )
		arrow.DisableDraw()

		arrowData.arrow <- arrow
		arrow.s.arrowData <- arrowData

		file.damageArrows.append( arrowData )
	}

	entity arrow = CreateClientSidePropDynamic( <0,0,0>, <0,0,0>, DAMAGEARROW_MODEL )
	file.damageArrowFadeDuration = arrow.GetSequenceDuration( DAMAGEARROW_FADEANIM ) // 0.266
	arrow.Destroy()
}


void function DamageArrow_CockpitInit( entity cockpit )
{
	entity localViewPlayer = GetLocalViewPlayer()
	thread UpdateDamageArrows( localViewPlayer, cockpit )
}

void function ShowDamageArrow( entity player, vector damageOrigin, int arrowType, entity attacker )
{
	if ( file.damageArrows.len() == 0 ) // not yet initialized
		return

	table arrowData = file.damageArrows[file.currentDamageArrow]
	entity arrow = expect entity( arrowData.arrow )

	file.currentDamageArrow++
	if ( file.currentDamageArrow >= file.numDamageArrows )
		file.currentDamageArrow = 0

	float time = Time()

	arrow.s.arrowData.damageOrigin = damageOrigin
	arrow.s.arrowData.grenade = null
	arrow.s.arrowData.grenadeRadius = 0.0
	arrow.s.arrowData.endTime = time + file.arrowIncomingAnims[ arrowType ].duration
	arrow.s.arrowData.startTime = time
	arrow.s.arrowData.isDying = false
	arrow.s.arrowData.whizby = false	//	hack until we get a new model/shader for the whizby indicator
	arrow.s.arrowData.attacker = attacker

	if ( !arrow.s.arrowData.isVisible )
	{
		entity cockpit = player.GetCockpit()

		if ( !cockpit )
			return

		arrow.s.arrowData.isVisible = true
		arrow.EnableDraw()

		arrow.DisableRenderWithViewModelsNoZoom()
		arrow.EnableRenderWithCockpit()

		arrow.EnableRenderWithHud()

		arrow.SetParent( cockpit, "CAMERA_BASE" )
		arrow.SetAttachOffsetOrigin( <20,0,-2> )
	}


	PulseDamageArrow( arrow, arrowType )
	UpdateDamageArrowVars( player )
	UpdateDamageArrowAngle( arrowData )
}

void function PulseDamageArrow( entity arrow, int arrowType )
{
	arrow.Anim_NonScriptedPlay( file.arrowIncomingAnims[ arrowType ].anim )
}

void function UpdateDamageArrowVars( entity localViewPlayer )
{
	file.damageArrowTime = Time()
	file.damageArrowAngles = AnglesInverse( localViewPlayer.EyeAngles() )
	file.damageArrowPointCenter = localViewPlayer.EyePosition() + ( localViewPlayer.GetViewVector() * 20.0 )
}

void function UpdateDamageArrowAngle( table arrowData )
{
	if ( IsValid( arrowData.grenade ) )
		arrowData.damageOrigin = arrowData.grenade.GetOrigin()

	vector vecToDamage = expect vector( arrowData.damageOrigin ) - file.damageArrowPointCenter
	vector anglesToDamage = VectorToAngles( vecToDamage )
	vector eyeAngles = GetLocalViewPlayer().EyeAngles()

	float roll = sin( DegToRad( eyeAngles.y - anglesToDamage.y ) )

	arrowData.arrow.SetAttachOffsetAngles( AnglesCompose( file.damageArrowAngles, anglesToDamage ) + <arrowData.randomAngle, 0, roll * 90.0> )
	arrowData.damageDirection = Normalize( vecToDamage )
}

void function UpdateDamageArrows( entity localViewPlayer, entity cockpit )
{
	localViewPlayer.EndSignal( "OnDestroy" )
	cockpit.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( localViewPlayer )
		{
			foreach ( arrowData in file.damageArrows )
			{
				if ( IsValid( arrowData.arrow ) )
				{
					arrowData.arrow.DisableDraw()
					arrowData.arrow.ClearParent()
					arrowData.attacker = null
					arrowData.isVisible = false
					arrowData.randomAngle = 0
				}
			}
		}
	)

	bool varsUpdated = false

	while ( true )
	{
		WaitEndFrame()

		vector playerOrigin = localViewPlayer.GetOrigin()

		varsUpdated = false
		bool inPhaseShift = localViewPlayer.IsPhaseShifted()

		foreach ( arrowData in file.damageArrows )
		{
			if ( !arrowData.isVisible )
			{
				continue
			}

			if ( arrowData.grenade != null )
			{
				if ( !IsValid( arrowData.grenade ) )
					arrowData.endTime = 0.0
			}

			if ( (file.damageArrowTime >= arrowData.endTime) || inPhaseShift )
			{
				arrowData.arrow.DisableDraw()
				arrowData.arrow.ClearParent()
				arrowData.attacker = null
				arrowData.isVisible = false
				arrowData.randomAngle = 0
				continue
			}

			if ( !varsUpdated ) // only call UpdateDamageArrowVars if one or more of the file.damageArrows is visible
			{
				varsUpdated = true
				UpdateDamageArrowVars( localViewPlayer )
			}

			UpdateDamageArrowAngle( arrowData )

			if ( !arrowData.isDying && ( ( arrowData.endTime - file.damageArrowTime ) <= file.damageArrowFadeDuration ) )
			{
				arrowData.isDying = true
				arrowData.arrow.Anim_NonScriptedPlay( DAMAGEARROW_FADEANIM )
			}
		}

		wait( 0.0 )
	}
}
