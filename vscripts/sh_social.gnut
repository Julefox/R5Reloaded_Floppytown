//

#if SERVER || CLIENT || UI
global function ShSocial_Init
#endif

#if SERVER
global function QueueUpdateStryderWithPlayersStryderCharDataArray
global function ImmediatelyUpdateStryderWithPlayersStryderCharDataArray
global function AddCallback_OnUpdatingPlayerStryderCharDataArray
#endif

#if UI
global function GetFriendsData
global function IsInParty
global function GetOnlineFriendCount
global function GetInGameFriendCount
global function HasCommunityUserPlayedApex
#endif

#if UI && R5DEV
global function Dev_ToggleInvalidFriendData
global function Dev_SetFillerFriends
#endif

#if CLIENT || UI 
global function GetItemFlavorForCommunityUserInfo
global function GetBadgeItemFlavorForCommunityUserInfo
global function GetBadgeDataIntegerFromCommunityUserInfo
global function GetTrackerItemFlavorForCommunityUserInfo
global function GetTrackerDataIntegerFromCommunityUserInfo
#endif



////////////////
////////////////
//// Consts ////
////////////////
////////////////

// see ePlayerStryderArrayDataSlots in sh_consts.gnut

const float PLAYER_STRYDER_CHAR_DATA_ARRAY_CASUAL_UPDATE_DEBOUNCE_INTERVAL = 2.0 // max update rate

const bool PLAYER_STRYDER_CHAR_DATA_ARRAY_SEND_DEBUG = true


///////////////////////
///////////////////////
//// Private Types ////
///////////////////////
///////////////////////
#if SERVER || CLIENT || UI
struct
{
	#if SERVER
		array<void functionref( entity player )> onUpdatingPlayerStryderCharDataArrayCallbacks
	#endif
	#if UI
		bool                        invalidFriendData = false
		int                         fillerFriends = 0
		array<CommunityFriendsData> fillerFriendArray

		table<string, string>		slowScriptLowercaseNameCache
	#endif
} file
#endif


/////////////////////////
/////////////////////////
//// Initialiszation ////
/////////////////////////
/////////////////////////
#if SERVER || CLIENT || UI
void function ShSocial_Init()
{
	#if SERVER
		AddCallback_OnPreClientDisconnected( ImmediatelyUpdateStryderWithPlayersStryderCharDataArray )
	#endif
}
#endif


//////////////////////////
//////////////////////////
//// Global functions ////
//////////////////////////
//////////////////////////
#if UI
FriendsData function GetFriendsData( bool groupByStatus = false )
{
	CommunityFriendsWithPresence friendInfo = GetFriendInfoAndPresence()

	FriendsData returnData
	returnData.isValid = friendInfo.isValid

	#if R5DEV
		if ( file.invalidFriendData )
			returnData.isValid = false

		if ( file.fillerFriendArray.len() == 0 )
		{
			for ( int index = 0; index < file.fillerFriends; index++ )
			{
				returnData.isValid = true
				file.fillerFriendArray.append( Dev_GetFakeFriendData() )
			}
		}

		foreach ( fillerFriend in file.fillerFriendArray )
		{
			friendInfo.friends.append( fillerFriend )
		}

	#endif

	if ( !returnData.isValid )
		return returnData

	array<Friend> friends

	//printt( "friendInfo:" )

	foreach ( entry in friendInfo.friends )
	{
		Friend friend
		friend.id = entry.id
		friend.hardware = entry.hardware
		friend.name = entry.name
		friend.presence = entry.presence
		friend.ingame = entry.ingame
		friend.inparty = IsInParty( entry.id )
		friend.away = entry.away

		if ( !(friend.name in file.slowScriptLowercaseNameCache) )
			file.slowScriptLowercaseNameCache[friend.name] <- friend.name.tolower()

		if ( entry.online )
		{
			if ( friend.away )
				friend.status = eFriendStatus.ONLINE_AWAY
			else if ( friend.ingame )
				friend.status = eFriendStatus.ONLINE_INGAME
			else
				friend.status = eFriendStatus.ONLINE
		}
		else
		{
			friend.status = eFriendStatus.OFFLINE
		}

		friends.append( friend )
	}

	if ( groupByStatus )
		friends.sort( SortFriendGroupStatus )

	returnData.friends = friends

	return returnData
}
#endif


#if UI
bool function IsInParty( string id )
{
	Party party = GetParty()
	foreach (partyMember in party.members)
	{
		if ( partyMember.uid == id )
			return true
	}

	return false
}
#endif


#if UI
int function GetOnlineFriendCount( bool filterParty = false )
{
	CommunityFriendsWithPresence friendsData = GetFriendInfoAndPresence()
	if ( !friendsData.isValid )
		return 0

	int count = 0
	foreach ( friend in friendsData.friends )
	{
		if ( !friend.online )
			continue

		if ( filterParty && IsInParty( friend.id ) )
			continue

		count++
	}

	return count
}
#endif


#if UI
int function GetInGameFriendCount( bool filterParty = false )
{
	CommunityFriendsWithPresence friendsData = GetFriendInfoAndPresence()
	if ( !friendsData.isValid )
		return 0

	int count = 0
	foreach ( friend in friendsData.friends )
	{
		if ( !friend.online )
			continue

		if ( !friend.ingame )
			continue

		if ( filterParty && IsInParty( friend.id ) )
			continue

		count++
	}

	return count
}
#endif

#if(UI)
bool function HasCommunityUserPlayedApex( CommunityUserInfo cui )
{
	int stryderCharacterData = cui.charData[ ePlayerStryderCharDataArraySlots.CHARACTER ]

	return stryderCharacterData != 0 //
}

#endif

///////////////////////
///////////////////////
//// Dev functions ////
///////////////////////
///////////////////////
#if UI && R5DEV
array<string> friendNames = [ "Anderson", "Alavi", "Vinson", "Armstrong", "Perera", "Moy", "Messerly", "Davis", "McCord", "Keating",
	"Grenier", "Abrahamson", "Sanchez", "Medina", "McCoy", "Horn", "Cavallari", "McCandlish", "Alderman", "DeRose" ]

CommunityFriendsData function Dev_GetFakeFriendData()
{
	CommunityFriendsData entry
	entry.name = friendNames[RandomInt( friendNames.len() )] + "(" + RandomInt( 100000 ) + ")"
	entry.id = "random" + Time()
	entry.ingame = CoinFlip()
	entry.online = entry.ingame && CoinFlip()
	entry.presence = entry.online ? "IN-ORIGIN" : "45 minutes ago"

	if ( CoinFlip() )
		entry.name = entry.name.tolower()

	return entry
}
#endif


#if UI && R5DEV
void function Dev_ToggleInvalidFriendData()
{
	file.invalidFriendData = !file.invalidFriendData
}
#endif


#if UI && R5DEV
void function Dev_SetFillerFriends( int count )
{
	file.fillerFriends = count
}
#endif

#if SERVER
void function QueueUpdateStryderWithPlayersStryderCharDataArray( entity player )
{
	Throttle( player.p.playerStryderDataUpdateThrottle, PLAYER_STRYDER_CHAR_DATA_ARRAY_CASUAL_UPDATE_DEBOUNCE_INTERVAL, void function() : ( player ) {
		if ( !IsValid( player ) )
			return

		ImmediatelyUpdateStryderWithPlayersStryderCharDataArray( player )
	} )
}
#endif


#if SERVER
void function ImmediatelyUpdateStryderWithPlayersStryderCharDataArray( entity player )
{
	int[ePlayerStryderCharDataArraySlots.COUNT] oldData
	for ( int idx = 0; idx < ePlayerStryderCharDataArraySlots.COUNT; idx++ )
	{
		oldData[idx] = player.p.stryderArrayData[idx]
		player.p.stryderArrayData[idx] = INT_MIN // clear
	}


	// VERSION
	player.p.stryderArrayData[ePlayerStryderCharDataArraySlots.VERSION] = PLAYER_STRYDER_CHAR_DATA_ARRAY_VERSION


	// LOADOUTS
	foreach ( LoadoutEntry entry in GetAllLoadoutSlots() )
	{
		if ( entry.stryderCharDataArrayIndex == ePlayerStryderCharDataArraySlots.INVALID )
			continue

		Assert( entry.stryderCharDataArrayIndex > ePlayerStryderCharDataArraySlots.VERSION && entry.stryderCharDataArrayIndex < ePlayerStryderCharDataArraySlots.COUNT )

		if ( !IsLoadoutSlotActive( player, entry ) )
			continue

		Assert( player.p.stryderArrayData[entry.stryderCharDataArrayIndex] == INT_MIN,
					"Two loadout slots are using the same player stryder char data array slot: " + entry.stryderCharDataArrayIndex )

		Assert( LoadoutSlot_IsReady( player, entry ) )

		player.p.stryderArrayData[entry.stryderCharDataArrayIndex] = LoadoutSlot_GetRawStorageContents( player, entry )
	}


	// CALLBACKS (so they can fill in more data)
	foreach ( void functionref ( entity ) cb in file.onUpdatingPlayerStryderCharDataArrayCallbacks )
		cb( player )


	// SEND THE DATA (only if different)
	bool anyDifferent = false
	array<int> charData
	charData.resize( player.p.stryderArrayData.len(), 0 )
	#if PLAYER_STRYDER_CHAR_DATA_ARRAY_SEND_DEBUG
		string dbgStr = ""
	#endif
	for ( int index = 0; index < player.p.stryderArrayData.len(); index++ )
	{
		charData[index] = player.p.stryderArrayData[index]
		#if PLAYER_STRYDER_CHAR_DATA_ARRAY_SEND_DEBUG
			string itemFlavStr = (IsValidItemFlavorGUID( charData[index] ) ? ItemFlavor_GetHumanReadableRef( GetItemFlavorByGUID( charData[index] ) ) : "~")
			dbgStr += format( "\nPLAYER_STRYDER_CHAR_DATA_ARRAY_SEND_DEBUG: % 2d % 20s % 14d %s", index, DEV_GetEnumStringSafe( "ePlayerStryderCharDataArraySlots", index ), charData[index], itemFlavStr )
		#endif
		if ( player.p.stryderArrayData[index] != oldData[index] )
			anyDifferent = true
	}

	#if PLAYER_STRYDER_CHAR_DATA_ARRAY_SEND_DEBUG
		printt( format( "PLAYER_STRYDER_CHAR_DATA_ARRAY_SEND_DEBUG: %s (%s)%s", string(player), (anyDifferent ? "(SENDING!)" : "(UNCHANGED)"), dbgStr ) )
	#endif

	if ( anyDifferent )
		player.SetPlayerCharData( 0, charData )
}
#endif


#if SERVER
void function AddCallback_OnUpdatingPlayerStryderCharDataArray( void functionref( entity ) cb )
{
	file.onUpdatingPlayerStryderCharDataArrayCallbacks.append( cb )
}
#endif


#if UI || CLIENT 
ItemFlavor function GetItemFlavorForCommunityUserInfo( CommunityUserInfo userInfo, int slotIndex, int itemType )
{
	ItemFlavor ornull requestedFlavor = GetItemFlavorOrNullByGUID( userInfo.charData[slotIndex], itemType )

	LoadoutEntry entry
	if ( itemType == eItemType.character )
	{
		entry = Loadout_CharacterClass()
	}
	else
	{
		ItemFlavor character = GetItemFlavorForCommunityUserInfo( userInfo, ePlayerStryderCharDataArraySlots.CHARACTER, eItemType.character )
		switch ( itemType )
		{
			case eItemType.character_skin :
			{
				entry = Loadout_CharacterSkin( character )
				break
			}

			case eItemType.gladiator_card_frame :
			{
				entry = Loadout_GladiatorCardFrame( character )
				break
			}

			case eItemType.gladiator_card_stance :
			{
				entry = Loadout_GladiatorCardStance( character )
				break
			}

			case eItemType.gladiator_card_intro_quip :
			{
				entry = Loadout_CharacterIntroQuip( character )
				break
			}

			default:
				unreachable //
		}
	}

	if ( requestedFlavor == null || !IsItemFlavorValidForLoadoutSlot( EHI_null, entry, expect ItemFlavor(requestedFlavor) ) )
		requestedFlavor = GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	expect ItemFlavor(requestedFlavor)

	return requestedFlavor
}

ItemFlavor function GetBadgeItemFlavorForCommunityUserInfo( CommunityUserInfo userInfo, ItemFlavor character, int badgeIndex )
{
	LoadoutEntry entry                = Loadout_GladiatorCardBadge( character, badgeIndex )
	ItemFlavor ornull badgeItemFlavor = GetItemFlavorOrNullByGUID( userInfo.charData[ ePlayerStryderCharDataArraySlots.BANNER_BADGE1 + 2 * badgeIndex ], eItemType.gladiator_card_badge ) //

	if ( badgeItemFlavor == null )
		badgeItemFlavor = GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	expect ItemFlavor( badgeItemFlavor )

	if ( !IsItemFlavorValidForLoadoutSlot( EHI_null, entry, badgeItemFlavor ) )
		badgeItemFlavor = GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	return badgeItemFlavor
}

int function GetBadgeDataIntegerFromCommunityUserInfo( CommunityUserInfo userInfo, int badgeIndex )
{
	int dataInteger = maxint( 0, userInfo.charData[ePlayerStryderCharDataArraySlots.BANNER_BADGE1_TIER + 2 * badgeIndex] - 2 ) //
	return dataInteger
}

ItemFlavor function GetTrackerItemFlavorForCommunityUserInfo( CommunityUserInfo userInfo, ItemFlavor character, int trackerIndex )
{
	LoadoutEntry entry                  = Loadout_GladiatorCardStatTracker( character, trackerIndex )
	ItemFlavor ornull trackerItemFlavor = GetItemFlavorOrNullByGUID( userInfo.charData[ ePlayerStryderCharDataArraySlots.BANNER_TRACKER1 + 2 * trackerIndex], eItemType.gladiator_card_stat_tracker )//
	if ( trackerItemFlavor == null )
		trackerItemFlavor = GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	expect ItemFlavor( trackerItemFlavor )

	if ( !IsItemFlavorValidForLoadoutSlot( EHI_null, entry, trackerItemFlavor ) )
		trackerItemFlavor = GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	return trackerItemFlavor
}

int function GetTrackerDataIntegerFromCommunityUserInfo( CommunityUserInfo userInfo, int trackerIndex )
{
	int dataInteger = maxint( 0, userInfo.charData[ePlayerStryderCharDataArraySlots.BANNER_TRACKER1_VALUE + 2 * trackerIndex] - 2 ) //
	return dataInteger
}
#endif


///////////////////
///////////////////
//// Internals ////
///////////////////
///////////////////
#if UI
int function SortFriendGroupStatus( Friend a, Friend b )
{
	if ( a.inparty && !b.inparty )
		return -1
	else if ( b.inparty && !a.inparty )
		return 1

	if ( a.status < b.status )
		return -1
	else if ( b.status < a.status )
		return 1

	if ( file.slowScriptLowercaseNameCache[a.name] > file.slowScriptLowercaseNameCache[b.name] )
		return 1

	if ( file.slowScriptLowercaseNameCache[a.name] < file.slowScriptLowercaseNameCache[b.name] )
		return -1

	return 0
}
#endif